{"mappings":"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","sources":["<anon>","src/index.ts","src/classes/main.ts","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","src/classes/timer.ts","src/classes/parameters.ts","src/classes/controller.ts","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/classes/vector2d.ts","src/classes/geneticAlgorithm.ts","src/classes/mineSweeper.ts","src/classes/neuralNet.ts","src/classes/neuronLayer.ts","src/classes/neuron.ts","src/classes/twoDimensionalMatrix.ts","src/utils/clamp.ts"],"sourcesContent":["(function () {\nfunction $6a2b2f5024d4ec83$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $ee20bab046a9ef96$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $ee20bab046a9ef96$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $ee20bab046a9ef96$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $ee20bab046a9ef96$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\n\n\nvar $6921c8a491732171$var$Parameters = function Parameters() {\n    \"use strict\";\n    (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Parameters);\n};\n(function() {\n    /* General parameters */ $6921c8a491732171$var$Parameters.windowWidth = 400;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.windowHeight = 400;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.framesPerSecond = 120;\n})();\n(function() {\n    /* Used for the neural network */ $6921c8a491732171$var$Parameters.numInputs = 4;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.numHidden = 1;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.neuronsPerHiddenLayer = 6;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.numOutputs = 2;\n})();\n(function() {\n    /* for tweeking the sigmoid function */ $6921c8a491732171$var$Parameters.activationResponse = 1;\n})();\n(function() {\n    /* Bias value */ $6921c8a491732171$var$Parameters.bias = -1;\n})();\n(function() {\n    /* limits how fast the sweepers can turn */ $6921c8a491732171$var$Parameters.maxTurnRate = 0.3;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.maxSpeed = 2;\n})();\n(function() {\n    /* for controlling the size */ $6921c8a491732171$var$Parameters.sweeperScale = 5;\n})();\n(function() {\n    /* controller parameters */ $6921c8a491732171$var$Parameters.numMines = 40;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.numSweepers = 30;\n})();\n(function() {\n    /* number of time steps we allow for each generation to live */ $6921c8a491732171$var$Parameters.numTicks = 2000;\n})();\n(function() {\n    /* scaling factor for mines */ $6921c8a491732171$var$Parameters.mineScale = 2;\n})();\n(function() {\n    /* Genetic Algorithim parameters */ $6921c8a491732171$var$Parameters.crossoverRate = 0.7;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.mutationRate = 0.05 // 0.1\n    ;\n})();\n(function() {\n    /* the maximum amount the ga may mutate each weight by */ $6921c8a491732171$var$Parameters.maxPerturbation = 0.3;\n})();\n(function() {\n    /* used for elitism */ $6921c8a491732171$var$Parameters.numElite = 4;\n})();\n(function() {\n    $6921c8a491732171$var$Parameters.numCopiesElite = 1;\n})();\nvar $6921c8a491732171$export$2e2bcd8739ae039 = $6921c8a491732171$var$Parameters;\n\n\nvar $702d89c39a5d947d$var$Timer = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Timer() {\n        var fps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, $6921c8a491732171$export$2e2bcd8739ae039).framesPerSecond;\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Timer);\n        this.currentTime = 0;\n        this.lastTime = 0;\n        this.nextTime = 0;\n        this.frameTime = 0;\n        // this strategy is mostly a byproduct of being a port from C++\n        this.perfCountFreq = 1000; //ms in a second \n        this.timeElapsed = 0;\n        this.fps = 0;\n        if (fps) {\n            this.fps = fps;\n            this.frameTime = this.perfCountFreq / this.fps;\n            this.lastTime = new Date().getTime();\n            this.currentTime = this.lastTime;\n            this.nextTime = this.currentTime + this.frameTime;\n        }\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(Timer, [\n        {\n            key: \"start\",\n            value: function start() {\n                this.nextTime = new Date().getTime() + this.frameTime;\n            }\n        },\n        {\n            key: \"readyForNextFrame\",\n            value: function readyForNextFrame() {\n                this.currentTime = new Date().getTime();\n                if (this.currentTime > this.nextTime) {\n                    this.timeElapsed = this.currentTime - this.lastTime;\n                    this.lastTime = this.currentTime;\n                    this.nextTime = this.currentTime + this.frameTime;\n                    return true;\n                } else return false;\n            }\n        },\n        {\n            key: \"getTimeElapsed\",\n            value: function getTimeElapsed() {\n                this.currentTime = new Date().getTime();\n                this.timeElapsed = this.currentTime - this.lastTime;\n                this.lastTime = this.currentTime;\n                return this.timeElapsed;\n            }\n        }\n    ]);\n    return Timer;\n}();\nvar $702d89c39a5d947d$export$2e2bcd8739ae039 = $702d89c39a5d947d$var$Timer;\n\n\n\n\nfunction $9b547ff733c97a35$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $8c187d86836ebd16$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $9b547ff733c97a35$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $1d102d83300b551e$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $9476761b01b79dcb$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d5f380987878722e$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $9b547ff733c97a35$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $9b547ff733c97a35$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $b79d847807e3ac29$export$1b5e630bc3aea29f(arr) {\n    return (0, $8c187d86836ebd16$export$7e0947b5ad3404e2)(arr) || (0, $1d102d83300b551e$export$1eb58a6e75231000)(arr) || (0, $d5f380987878722e$export$a5be06335b3a083c)(arr) || (0, $9476761b01b79dcb$export$e6f3c4780d19eb2b)();\n}\n\n\n\n\nvar $b44c2fd25c0a87f9$var$Vector2d = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Vector2d(a, b) {\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Vector2d);\n        this.x = a;\n        this.y = b;\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(Vector2d, [\n        {\n            key: \"add\",\n            value: function add(vector) {\n                this.x += vector.x;\n                this.y += vector.y;\n                return this;\n            }\n        },\n        {\n            key: \"subtract\",\n            value: function subtract(vector) {\n                this.x -= vector.x;\n                this.y -= vector.y;\n                return this;\n            }\n        },\n        {\n            key: \"multiply\",\n            value: function multiply(multiplier) {\n                this.x *= multiplier;\n                this.y *= multiplier;\n                return this;\n            }\n        },\n        {\n            key: \"divide\",\n            value: function divide(divisor) {\n                this.x /= divisor;\n                this.y /= divisor;\n                return this;\n            }\n        },\n        {\n            // also called length of a 2d vector, \n            // hypotenuse of a right triangle\n            key: \"magnitude\",\n            value: function magnitude() {\n                return Math.sqrt(this.x * this.x + this.y * this.y);\n            }\n        },\n        {\n            key: \"normalize\",\n            value: function normalize() {\n                return this.divide(this.magnitude());\n            }\n        }\n    ], [\n        {\n            key: \"dot\",\n            value: function dot(vector1, vector2) {\n                return vector1.x * vector2.x + vector1.y * vector2.y;\n            }\n        },\n        {\n            key: \"sign\",\n            value: function sign(vector1, vector2) {\n                if (vector1.y * vector2.x > vector1.x * vector2.y) return 1;\n                else return -1;\n            }\n        }\n    ]);\n    return Vector2d;\n}();\nvar $b44c2fd25c0a87f9$export$2e2bcd8739ae039 = $b44c2fd25c0a87f9$var$Vector2d;\n\n\n\n\n\n\nvar $8c269be459121e9a$var$genomeCoutner = 0;\nvar $8c269be459121e9a$export$42a9d1bcccbbcaf9 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Genome() {\n        var w = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], dFitness = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, name = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Genome);\n        this.vecWeights = [];\n        this.dFitness = 0;\n        this.name = name ? name : \"Genome_\".concat($8c269be459121e9a$var$genomeCoutner++);\n        if (w.length < 1) this.dFitness = 0;\n        else if (w.length > 0) {\n            this.vecWeights = (0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(w);\n            this.dFitness = dFitness;\n        }\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(Genome, [\n        {\n            key: \"getName\",\n            value: function getName() {\n                return this.name;\n            }\n        },\n        {\n            key: \"setName\",\n            value: function setName(name) {\n                this.name = name;\n            }\n        }\n    ], [\n        {\n            key: \"sort\",\n            value: function sort(a, b) {\n                return a.dFitness - b.dFitness;\n            }\n        }\n    ]);\n    return Genome;\n}();\nvar $8c269be459121e9a$var$GeneticAlgorithm = /*#__PURE__*/ function() {\n    \"use strict\";\n    function GeneticAlgorithm(popsize, MutRat, CrossRat, numweights) {\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, GeneticAlgorithm);\n        this.vecPop = [];\n        this.iPopSize = popsize;\n        this.dMutationRate = MutRat;\n        this.dCrossoverRate = CrossRat;\n        this.iChromoLength = numweights;\n        this.medianFitness = 0;\n        this.dTotalFitness = 0;\n        this.cGeneration = 0;\n        this.iFittestGenome = 0;\n        this.dBestFitness = 0;\n        this.dWorstFitness = 99999999;\n        this.dAverageFitness = 0;\n        //initialise population with chromosomes consisting of random\n        //weights while all fitnesses are zero\n        for(var i = 0; i < this.iPopSize; i++){\n            this.vecPop.push(new $8c269be459121e9a$export$42a9d1bcccbbcaf9([], 0));\n            for(var j = 0; j < this.iChromoLength; j++)this.vecPop[i].vecWeights.push(Math.random());\n        }\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(GeneticAlgorithm, [\n        {\n            //---------------------------------mutate--------------------------------\n            //\n            //\tmutates a chromosome by perturbing its weights by an amount not \n            //\tgreater than dMaxPerturbation\n            //  this mutates the chromo in place\n            //-----------------------------------------------------------------------\n            key: \"mutate\",\n            value: function mutate(chromo) {\n                // traverse the chromosome and mutate each weight dependent\n                // on the mutation rate\n                var newChromo = [];\n                for(var i = 0; i < chromo.length; i++)// do we perturb this weight?\n                if (Math.random() < this.dMutationRate) // add or subtract a small value to the weight\n                // Math.random() - Math.random() returns a value between -1 and 1\n                newChromo[i] = chromo[i] + (Math.random() - Math.random()) * (0, $6921c8a491732171$export$2e2bcd8739ae039).maxPerturbation;\n                else // no mutation\n                newChromo[i] = chromo[i];\n                return newChromo;\n            }\n        },\n        {\n            //----------------------------------getChromoRoulette()------------------\n            //\n            //\treturns a chromo based on roulette wheel sampling\n            //\n            //-----------------------------------------------------------------------\n            key: \"getChromoRoulette\",\n            value: function getChromoRoulette() {\n                //generate a random number between 0 & total fitness count\n                var slice = Math.random() * this.dTotalFitness;\n                //this will be set to the chosen chromosome\n                var theChosenOne;\n                //go through the chromosomes adding up the fitness so far\n                var fitnessSoFar = 0;\n                for(var i = 0; i < this.vecPop.length; i++){\n                    fitnessSoFar += this.vecPop[i].dFitness;\n                    //if the fitness so far > random number return the chromo at \n                    //this point\n                    if (fitnessSoFar >= slice) {\n                        theChosenOne = this.vecPop[i];\n                        break;\n                    }\n                }\n                if (typeof theChosenOne === \"undefined\") throw new Error(\"not a genome!\");\n                return new $8c269be459121e9a$export$42a9d1bcccbbcaf9((0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(theChosenOne.vecWeights), theChosenOne.dFitness, theChosenOne.getName());\n            }\n        },\n        {\n            //-------------------------------------crossover()-----------------------\n            //\t\n            //  given parents and storage for the offspring this method performs\n            //\tcrossover according to the GAs crossover rate\n            //-----------------------------------------------------------------------\n            key: \"crossover\",\n            value: function crossover(mum, dad, baby1, baby2) {\n                //just return parents as offspring dependent on the rate\n                //or if parents are the same\n                if (Math.random() > this.dCrossoverRate || mum.join(\"\") === dad.join(\"\")) {\n                    mum.forEach(function(x) {\n                        return baby1.push(x);\n                    });\n                    dad.forEach(function(x) {\n                        return baby2.push(x);\n                    });\n                    return;\n                }\n                //determine a crossover point\n                var cp = Math.round(Math.random() * (mum.length - 1));\n                //create the offspring\n                for(var i = 0; i < cp; i++){\n                    baby1.push(mum[i]);\n                    baby2.push(dad[i]);\n                }\n                for(var i1 = cp; i1 < mum.length; i1++){\n                    baby1.push(dad[i1]);\n                    baby2.push(mum[i1]);\n                }\n                return;\n            }\n        },\n        {\n            //-----------------------------------epoch()-----------------------------\n            //\n            //\ttakes a population of chromosones and runs the algorithm through one\n            //\t cycle.\n            //\tReturns a new population of chromosones.\n            //\n            //-----------------------------------------------------------------------\n            key: \"epoch\",\n            value: function epoch(oldPop) {\n                var _oldPop;\n                //assign the given population to the classes population\n                console.log(\"this.vecPop: \".concat(JSON.stringify(this.vecPop.map(function(g) {\n                    return g.getName();\n                }))));\n                console.log(\"oldPop: \".concat(JSON.stringify(oldPop.map(function(g) {\n                    return g.getName();\n                }))));\n                this.vecPop = oldPop;\n                //reset the appropriate variables\n                this.reset();\n                //sort the population (for scaling and elitism)\n                this.vecPop.sort($8c269be459121e9a$export$42a9d1bcccbbcaf9.sort);\n                //calculate best, worst, average and total fitness\n                this.calculateBestWorstAvTot();\n                //create a temporary vector to store new chromosones\n                var vecNewPop = [];\n                //Now to add a little elitism we shall add in some copies of the\n                //fittest genomes. Make sure we add an EVEN number or the roulette\n                //wheel sampling will crash\n                if (!((0, $6921c8a491732171$export$2e2bcd8739ae039).numCopiesElite * (0, $6921c8a491732171$export$2e2bcd8739ae039).numElite % 2)) this.grabNBest((0, $6921c8a491732171$export$2e2bcd8739ae039).numElite, (0, $6921c8a491732171$export$2e2bcd8739ae039).numCopiesElite, vecNewPop);\n                else console.log(\"error: numCopiesElite * numElite is not even\");\n                //now we enter the GA loop\n                //repeat until a new population is generated\n                while(vecNewPop.length < this.iPopSize){\n                    //grab two chromosones\n                    var mum = this.getChromoRoulette();\n                    var dad = this.getChromoRoulette();\n                    //create some offspring via crossover\n                    var baby1 = [];\n                    var baby2 = [];\n                    this.crossover(mum.vecWeights, dad.vecWeights, baby1, baby2);\n                    //now we mutate\n                    var mutieBaby1 = this.mutate(baby1);\n                    var mutieBaby2 = this.mutate(baby2);\n                    // console.log(`mutieBaby1: ${JSON.stringify(mutieBaby1)}`)\n                    //now copy into vecNewPop population\n                    vecNewPop.push(new $8c269be459121e9a$export$42a9d1bcccbbcaf9((0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(mutieBaby1), 0));\n                    vecNewPop.push(new $8c269be459121e9a$export$42a9d1bcccbbcaf9((0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(mutieBaby2), 0));\n                }\n                //finished so assign new pop back into m_vecPop\n                this.vecPop = vecNewPop;\n                oldPop.length = 0;\n                (_oldPop = oldPop).push.apply(_oldPop, (0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(this.vecPop));\n            }\n        },\n        {\n            //-------------------------grabNBest----------------------------------\n            //\n            //\tThis works like an advanced form of elitism by inserting NumCopies\n            //  copies of the NBest most fittest genomes into a population vector\n            //--------------------------------------------------------------------\n            key: \"grabNBest\",\n            value: function grabNBest(nBest, numCopies, pop) {\n                var nB = nBest;\n                //add the required amount of copies of the n most fittest \n                //to the supplied vector\n                while(nB--)for(var i = 0; i < numCopies; i++)pop.push(new $8c269be459121e9a$export$42a9d1bcccbbcaf9((0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(this.vecPop[this.vecPop.length - 1 - nB].vecWeights), 0, this.vecPop[this.vecPop.length - 1 - nB].getName()));\n            }\n        },\n        {\n            //-----------------------calculateBestWorstAvTot-----------------------\t\n            //\n            //\tcalculates the fittest and weakest genome and the average/total \n            //\tfitness scores\n            //---------------------------------------------------------------------\n            key: \"calculateBestWorstAvTot\",\n            value: function calculateBestWorstAvTot() {\n                this.dTotalFitness = 0;\n                var highestSoFar = 0;\n                var lowestSoFar = 9999999;\n                this.vecPop.sort($8c269be459121e9a$export$42a9d1bcccbbcaf9.sort);\n                this.medianFitness = this.vecPop[Math.floor(this.vecPop.length / 2)].dFitness;\n                for(var i = 0; i < this.vecPop.length; i++){\n                    //update fittest if necessary\n                    if (this.vecPop[i].dFitness > highestSoFar) {\n                        highestSoFar = this.vecPop[i].dFitness;\n                        this.iFittestGenome = i;\n                        this.dBestFitness = highestSoFar;\n                    }\n                    //update worst if necessary\n                    if (this.vecPop[i].dFitness < lowestSoFar) {\n                        lowestSoFar = this.vecPop[i].dFitness;\n                        this.dWorstFitness = lowestSoFar;\n                    }\n                    this.dTotalFitness += this.vecPop[i].dFitness;\n                } //next chromo\n                this.dAverageFitness = this.dTotalFitness / this.iPopSize;\n            }\n        },\n        {\n            //-------------------------reset()------------------------------\n            //\n            //\tresets all the relevant variables ready for a new generation\n            //--------------------------------------------------------------\n            key: \"reset\",\n            value: function reset() {\n                this.dTotalFitness = 0;\n                this.dBestFitness = 0;\n                this.dWorstFitness = 9999999;\n                this.dAverageFitness = 0;\n                this.medianFitness = 0;\n            }\n        },\n        {\n            //accessor methods\n            key: \"getChromos\",\n            value: function getChromos() {\n                return this.vecPop;\n            }\n        },\n        {\n            key: \"getGeneration\",\n            value: function getGeneration() {\n                return this.cGeneration;\n            }\n        },\n        {\n            key: \"averageFitness\",\n            value: function averageFitness() {\n                return this.dTotalFitness / this.iPopSize;\n            }\n        },\n        {\n            key: \"bestFitness\",\n            value: function bestFitness() {\n                return this.dBestFitness;\n            }\n        },\n        {\n            key: \"getMedianFitness\",\n            value: function getMedianFitness() {\n                return this.medianFitness;\n            }\n        }\n    ]);\n    return GeneticAlgorithm;\n}();\nvar $8c269be459121e9a$export$2e2bcd8739ae039 = $8c269be459121e9a$var$GeneticAlgorithm;\n\n\n\n\n\n\n\n\n\nvar $4f7b016c02428e41$var$Neuron = function Neuron(numInputs) {\n    \"use strict\";\n    (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Neuron);\n    this.vecWeight = [];\n    //we need an additional weight for the bias hence the +1\n    this.numInputs = numInputs;\n    for(var i = 0; i < numInputs + 1; ++i)this.vecWeight.push(Math.random());\n};\nvar $4f7b016c02428e41$export$2e2bcd8739ae039 = $4f7b016c02428e41$var$Neuron;\n\n\nvar $94031f946807b8f9$var$NeuronLayer = function NeuronLayer(numNeurons, numInputsPerNeuron) {\n    \"use strict\";\n    (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, NeuronLayer);\n    //the layer of neurons\n    this.vecNeurons = [];\n    this.numNeurons = numNeurons;\n    this.numInputsPerNeuron = numInputsPerNeuron;\n    for(var i = 0; i < numNeurons; i++)this.vecNeurons.push(new (0, $4f7b016c02428e41$export$2e2bcd8739ae039)(this.numInputsPerNeuron));\n};\nvar $94031f946807b8f9$export$2e2bcd8739ae039 = $94031f946807b8f9$var$NeuronLayer;\n\n\n\n// import { dActivationResponse, dBias, iNeuronsPerHiddenLayer, iNumHidden, iNumInputs, iNumOutputs } from \"./parameters\";\nvar $b191d7915d020190$var$NeuralNet = /*#__PURE__*/ function() {\n    \"use strict\";\n    function NeuralNet() {\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, NeuralNet);\n        this.neuronLayers = [];\n        this.numInputs = (0, $6921c8a491732171$export$2e2bcd8739ae039).numInputs;\n        this.numOutputs = (0, $6921c8a491732171$export$2e2bcd8739ae039).numOutputs;\n        this.numHiddenLayers = (0, $6921c8a491732171$export$2e2bcd8739ae039).numHidden;\n        this.neuronsPerHiddenLayer = (0, $6921c8a491732171$export$2e2bcd8739ae039).neuronsPerHiddenLayer;\n        this.createNet();\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(NeuralNet, [\n        {\n            key: \"createNet\",\n            value: function createNet() {\n                //create the layers of the network\n                if (this.numHiddenLayers > 0) {\n                    //create first hidden layer\n                    this.neuronLayers.push(new (0, $94031f946807b8f9$export$2e2bcd8739ae039)(this.neuronsPerHiddenLayer, this.numInputs));\n                    for(var i = 0; i < this.numHiddenLayers - 1; i++)this.neuronLayers.push(new (0, $94031f946807b8f9$export$2e2bcd8739ae039)(this.neuronsPerHiddenLayer, this.neuronsPerHiddenLayer));\n                    //create output layer\n                    this.neuronLayers.push(new (0, $94031f946807b8f9$export$2e2bcd8739ae039)(this.numOutputs, this.numInputs));\n                } else //create output layer\n                this.neuronLayers.push(new (0, $94031f946807b8f9$export$2e2bcd8739ae039)(this.numOutputs, this.numInputs));\n            }\n        },\n        {\n            //\treturns the total number of weights needed for the net\n            key: \"getNumberOfWeights\",\n            value: function getNumberOfWeights() {\n                var weights = 0;\n                //for each layer\n                for(var i = 0; i < this.numHiddenLayers; i++){\n                    //for each neuron\n                    // if(this.neuronLayers.length > 0){\n                    for(var j = 0; j < this.neuronLayers[i].numNeurons; j++)//for each weight\n                    for(var k = 0; k < this.neuronLayers[i].vecNeurons[j].numInputs; k++)weights++;\n                // }\n                }\n                return weights;\n            }\n        },\n        {\n            //\treturns an array containing the weights\n            key: \"getWeights\",\n            value: function getWeights() {\n                //this will hold the weights\n                var weights = [];\n                //for each layer\n                for(var i = 0; i < this.numHiddenLayers; i++){\n                    //for each neuron\n                    for(var j = 0; j < this.neuronLayers[i].numNeurons; j++)//for each weight\n                    for(var k = 0; k < this.neuronLayers[i].vecNeurons[j].numInputs; k++)weights.push(this.neuronLayers[i].vecNeurons[j].vecWeight[k]);\n                }\n                return weights;\n            }\n        },\n        {\n            key: \"putWeights\",\n            value: function putWeights(weights) {\n                var cWeight = 0;\n                //for each layer\n                for(var i = 0; i < this.numHiddenLayers; i++)//for each neuron\n                if (this.neuronLayers.length > 0) {\n                    for(var j = 0; j < this.neuronLayers[i].numNeurons; j++)//for each weight\n                    for(var k = 0; k < this.neuronLayers[i].vecNeurons[j].numInputs; k++)this.neuronLayers[i].vecNeurons[j].vecWeight[k] = weights[cWeight++];\n                }\n                return;\n            }\n        },\n        {\n            key: \"update\",\n            value: function update(inputArgs) {\n                var inputs = (0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(inputArgs);\n                // stores the resultant outputs from each layer\n                var outputs = [];\n                var cWeight = 0;\n                // first check that we have the correct amount of inputs\n                if (inputs.length !== this.numInputs) {\n                    // just return an empty vector if incorrect.\n                    console.log(\"Error wrong number of inputs, expected \".concat(this.numInputs, \" got \").concat(inputs.length));\n                    return outputs;\n                }\n                // For each layer.... (+1 for bias layer)\n                for(var i = 0; i < this.numHiddenLayers + 1; i++){\n                    if (i > 0) inputs = (0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(outputs);\n                    outputs.length = 0;\n                    cWeight = 0;\n                    // for each neuron sum the (inputs * corresponding weights).\n                    // Throw the total at our sigmoid function to get the output.\n                    if (this.neuronLayers.length > 0) for(var j = 0; j < this.neuronLayers[i].numNeurons; j++){\n                        var netinput = 0;\n                        this.numInputs = this.neuronLayers[i].vecNeurons[j].numInputs;\n                        for(var k = 0; k < this.numInputs - 1; k++)// sum the weights x inputs\n                        netinput += this.neuronLayers[i].vecNeurons[j].vecWeight[k] * inputs[cWeight++];\n                        // add in the bias\n                        netinput += this.neuronLayers[i].vecNeurons[j].vecWeight[this.numInputs - 1] * (0, $6921c8a491732171$export$2e2bcd8739ae039).bias;\n                        // we can store the outputs from each layer as we generate them.\n                        // The combined activation is first filtered through the sigmoid\n                        // function\n                        outputs.push(this.sigmoid(netinput, (0, $6921c8a491732171$export$2e2bcd8739ae039).activationResponse));\n                        cWeight = 0;\n                    }\n                }\n                return outputs;\n            }\n        },\n        {\n            key: \"sigmoid\",\n            value: function sigmoid(netinput, response) {\n                return 1 / (1 + Math.exp(-1 * netinput / response));\n            }\n        }\n    ]);\n    return NeuralNet;\n}();\nvar $b191d7915d020190$export$2e2bcd8739ae039 = $b191d7915d020190$var$NeuralNet;\n\n\n\n\n\n\nvar $fb029c0009eea432$var$TwoDimensionalMatrix = /*#__PURE__*/ function() {\n    \"use strict\";\n    function TwoDimensionalMatrix() {\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, TwoDimensionalMatrix);\n        this._11 = 1;\n        this._12 = 0;\n        this._13 = 0;\n        this._21 = 0;\n        this._22 = 1;\n        this._23 = 0;\n        this._31 = 0;\n        this._32 = 0;\n        this._33 = 1;\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(TwoDimensionalMatrix, [\n        {\n            key: \"consumeMatrix\",\n            value: function consumeMatrix(mIn) {\n                this._11 = mIn._11;\n                this._12 = mIn._12;\n                this._13 = mIn._13;\n                this._21 = mIn._21;\n                this._22 = mIn._22;\n                this._23 = mIn._23;\n                this._31 = mIn._31;\n                this._32 = mIn._32;\n                this._33 = mIn._33;\n            }\n        },\n        {\n            key: \"TwoDimensionalMatrixMultiply\",\n            value: function TwoDimensionalMatrixMultiply(mIn) {\n                var mat_temp = new TwoDimensionalMatrix();\n                mat_temp._11 = this._11 * mIn._11 + this._12 * mIn._21 + this._13 * mIn._31;\n                mat_temp._12 = this._11 * mIn._12 + this._12 * mIn._22 + this._13 * mIn._32;\n                mat_temp._13 = this._11 * mIn._13 + this._12 * mIn._23 + this._13 * mIn._33;\n                mat_temp._21 = this._21 * mIn._11 + this._22 * mIn._21 + this._23 * mIn._31;\n                mat_temp._22 = this._21 * mIn._12 + this._22 * mIn._22 + this._23 * mIn._32;\n                mat_temp._23 = this._21 * mIn._13 + this._22 * mIn._23 + this._23 * mIn._33;\n                mat_temp._31 = this._31 * mIn._11 + this._32 * mIn._21 + this._33 * mIn._31;\n                mat_temp._32 = this._31 * mIn._12 + this._32 * mIn._22 + this._33 * mIn._32;\n                mat_temp._33 = this._31 * mIn._13 + this._32 * mIn._23 + this._33 * mIn._33;\n                this.consumeMatrix(mat_temp);\n            }\n        },\n        {\n            key: \"createIdentity\",\n            value: function createIdentity() {\n                var matrix = new TwoDimensionalMatrix();\n                matrix._11 = 1;\n                matrix._22 = 1;\n                matrix._33 = 1;\n                matrix._12 = 0;\n                matrix._13 = 0;\n                matrix._21 = 0;\n                matrix._23 = 0;\n                matrix._31 = 0;\n                matrix._32 = 0;\n                return matrix;\n            }\n        },\n        {\n            key: \"translate\",\n            value: function translate(x, y) {\n                var matrix = this.createIdentity();\n                matrix._31 = x;\n                matrix._32 = y;\n                this.TwoDimensionalMatrixMultiply(matrix);\n            }\n        },\n        {\n            key: \"scale\",\n            value: function scale(xScale, yScale) {\n                var matrix = this.createIdentity();\n                matrix._11 = xScale;\n                matrix._22 = yScale;\n                this.TwoDimensionalMatrixMultiply(matrix);\n            }\n        },\n        {\n            key: \"rotate\",\n            value: function rotate(angle) {\n                var matrix = this.createIdentity();\n                var sin = Math.sin(angle);\n                var cos = Math.cos(angle);\n                matrix._11 = cos;\n                matrix._12 = sin;\n                matrix._21 = -1 * sin;\n                matrix._22 = cos;\n                this.TwoDimensionalMatrixMultiply(matrix);\n            }\n        },\n        {\n            key: \"transformPoints\",\n            value: function transformPoints(points) {\n                for(var i = 0; i < points.length; i++){\n                    var tempX = this._11 * points[i].x + this._21 * points[i].y + this._31;\n                    var tempY = this._12 * points[i].x + this._22 * points[i].y + this._32;\n                    points[i].x = tempX;\n                    points[i].y = tempY;\n                }\n            }\n        },\n        {\n            key: \"reportMatrix\",\n            value: function reportMatrix() {\n                return \"\\n        \".concat(this._11, \" \").concat(this._12, \" \").concat(this._13, \"\\n        \").concat(this._21, \" \").concat(this._22, \" \").concat(this._23, \"\\n        \").concat(this._31, \" \").concat(this._32, \" \").concat(this._33);\n            }\n        }\n    ]);\n    return TwoDimensionalMatrix;\n}();\nvar $fb029c0009eea432$export$2e2bcd8739ae039 = $fb029c0009eea432$var$TwoDimensionalMatrix;\n\n\n//-------------------------------------Clamp()-----------------------------------------\n//\n//\tclamps the first argument between the second two\n//\n//-------------------------------------------------------------------------------------\nvar $eb53fc1288879188$var$clamp = function(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n};\nvar $eb53fc1288879188$export$2e2bcd8739ae039 = $eb53fc1288879188$var$clamp;\n\n\nvar $f4baf23779c3576b$var$Minesweeper = function Minesweeper() {\n    \"use strict\";\n    var _this = this;\n    (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Minesweeper);\n    this.getNumberOfWeights = function() {\n        return _this.brain.getNumberOfWeights();\n    };\n    /*****\n     * reset\n     * Resets the sweepers position, fitness and rotation\n     * \n    */ this.reset = function() {\n        _this.position = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(Math.random() * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth, Math.random() * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight);\n        _this.rotation = Math.random() * 2 * Math.PI;\n        _this.minesFound = 0;\n    };\n    /**\n     * worldTransform\n     * \n     * sets up a translation matrix for the sweeper according to its\n     *  scale, rotation and position. Returns the transformed vertices.\n     * \n     */ this.worldTransform = function(sweeper) {\n        var matTransform = new (0, $fb029c0009eea432$export$2e2bcd8739ae039)();\n        matTransform.scale(_this.scale, _this.scale);\n        matTransform.rotate(_this.rotation % (2 * Math.PI));\n        matTransform.translate(_this.position.x, _this.position.y);\n        matTransform.transformPoints(sweeper);\n    };\n    /**\n     * update() \n     * First we take sensor readings and feed these into the sweepers brain.\n    * The inputs are:\n    * A vector to the closest mine (x, y)\n    * The sweepers 'look at' vector (x, y)\n    * We receive two outputs from the brain: leftTrack & rightTrack.\n    * Given a force for each track we calculate the resultant rotation \n    * and acceleration and apply to current velocity vector.\n    * */ this.update = function(mines) {\n        var inputs = [];\n        var closestMine = _this.getClosestMine(mines);\n        var closestMineV = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(closestMine.x, closestMine.y);\n        closestMineV.normalize();\n        inputs.push(closestMineV.x);\n        inputs.push(closestMineV.y);\n        inputs.push(_this.lookAt.x);\n        inputs.push(_this.lookAt.y);\n        _this.closestMine = mines.map(function(e) {\n            return \"\".concat(e.x, \",\").concat(e.y);\n        }).findIndex(function(e) {\n            return e === \"\".concat(closestMine.x, \",\").concat(closestMine.y);\n        });\n        var outputs = _this.brain.update(inputs);\n        if (outputs.length !== (0, $6921c8a491732171$export$2e2bcd8739ae039).numOutputs) throw new Error(\"Outputs length does not match number of outputs \".concat(outputs.length, \", \").concat((0, $6921c8a491732171$export$2e2bcd8739ae039).numOutputs));\n        _this.leftTrack = outputs[0];\n        _this.rightTrack = outputs[1];\n        var rotForce = _this.leftTrack - _this.rightTrack;\n        rotForce = (0, $eb53fc1288879188$export$2e2bcd8739ae039)(rotForce, -(0, $6921c8a491732171$export$2e2bcd8739ae039).maxTurnRate, (0, $6921c8a491732171$export$2e2bcd8739ae039).maxTurnRate);\n        _this.rotation += rotForce;\n        _this.velocity = _this.leftTrack + _this.rightTrack;\n        _this.lookAt.x = -1 * Math.sin(_this.rotation);\n        _this.lookAt.y = Math.cos(_this.rotation);\n        _this.position.add(_this.lookAt.multiply(_this.velocity));\n        if (_this.position.x < 0) _this.position.x = _this.position.x % (0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth + (0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth;\n        if (_this.position.x > (0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth) _this.position.x = _this.position.x % (0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth;\n        if (_this.position.y < 0) _this.position.y = _this.position.y % (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight + (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight;\n        if (_this.position.y > (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight) _this.position.y = _this.position.y % (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight;\n        return true;\n    };\n    this.getClosestMine = function(mines) {\n        var closestMine = 0;\n        var closestDistance = Number.MAX_VALUE;\n        var distance = 0;\n        for(var i = 0; i < mines.length; i++){\n            var temp = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(_this.position.x, _this.position.y);\n            distance = temp.subtract(mines[i]).magnitude();\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestMine = i;\n            }\n        }\n        return mines[closestMine];\n    };\n    this.incrementMinesFound = function() {\n        _this.minesFound++;\n    };\n    this.getMinesFound = function() {\n        return _this.minesFound;\n    };\n    this.getPosition = function() {\n        return new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(_this.position.x, _this.position.y);\n    };\n    this.checkForMine = function(mines, size) {\n        var temp = _this.getPosition();\n        var distance = temp.subtract(mines[_this.closestMine]).magnitude();\n        if (distance < size + 5) return _this.closestMine;\n        return -1;\n    };\n    // accessors\n    this.incrementFitness = function() {\n        _this.incrementMinesFound();\n    };\n    this.fitness = function() {\n        return _this.minesFound;\n    };\n    this.putWeights = function(w) {\n        _this.brain.putWeights((0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(w));\n    };\n    this.brain = new (0, $b191d7915d020190$export$2e2bcd8739ae039)();\n    this.position = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(Math.random() * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth, Math.random() * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight);\n    this.rotation = Math.random() * 2 * Math.PI;\n    this.lookAt = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(Math.sin(this.rotation) * -1, Math.cos(this.rotation));\n    this.velocity = 0;\n    this.minesFound = 0;\n    this.scale = (0, $6921c8a491732171$export$2e2bcd8739ae039).sweeperScale;\n    this.closestMine = 0;\n    this.leftTrack = 0.16;\n    this.rightTrack = 0.16;\n};\nvar $f4baf23779c3576b$export$2e2bcd8739ae039 = $f4baf23779c3576b$var$Minesweeper;\n\n\n\n\nvar $d9dd0c099e14db4d$var$numberSweeperVertices = 16;\nvar $d9dd0c099e14db4d$var$sweeperVertices = new Array($d9dd0c099e14db4d$var$numberSweeperVertices);\n$d9dd0c099e14db4d$var$sweeperVertices[0] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-1, -1);\n$d9dd0c099e14db4d$var$sweeperVertices[1] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-1, 1);\n$d9dd0c099e14db4d$var$sweeperVertices[2] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-0.5, 1);\n$d9dd0c099e14db4d$var$sweeperVertices[3] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-0.5, -1);\n$d9dd0c099e14db4d$var$sweeperVertices[4] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(0.5, -1);\n$d9dd0c099e14db4d$var$sweeperVertices[5] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(1, -1);\n$d9dd0c099e14db4d$var$sweeperVertices[6] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(1, 1);\n$d9dd0c099e14db4d$var$sweeperVertices[7] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(0.5, 1);\n$d9dd0c099e14db4d$var$sweeperVertices[8] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-0.5, -0.5);\n$d9dd0c099e14db4d$var$sweeperVertices[9] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(0.5, -0.5);\n$d9dd0c099e14db4d$var$sweeperVertices[10] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-0.5, 0.5);\n$d9dd0c099e14db4d$var$sweeperVertices[11] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-0.25, 0.5);\n$d9dd0c099e14db4d$var$sweeperVertices[12] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-0.25, 1.75);\n$d9dd0c099e14db4d$var$sweeperVertices[13] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(0.25, 1.75);\n$d9dd0c099e14db4d$var$sweeperVertices[14] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(0.25, 0.5);\n$d9dd0c099e14db4d$var$sweeperVertices[15] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(0.5, 0.5);\nvar $d9dd0c099e14db4d$var$numberMineVertices = 4;\nvar $d9dd0c099e14db4d$var$mine = new Array($d9dd0c099e14db4d$var$numberMineVertices);\n$d9dd0c099e14db4d$var$mine[0] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-1, -1);\n$d9dd0c099e14db4d$var$mine[1] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(-1, 1);\n$d9dd0c099e14db4d$var$mine[2] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(1, 1);\n$d9dd0c099e14db4d$var$mine[3] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(1, -1);\nvar $d9dd0c099e14db4d$var$Controller = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Controller(pause, unPause) {\n        var _this = this;\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Controller);\n        // array of mines\n        this.vecMines = [];\n        // vertex buffer for the sweeper shape's vertices\n        this.sweeperVB = [];\n        // vertex buffer for the mine shape's vertices\n        this.mineVB = [];\n        this.fastRender = false;\n        this.iTick = 0;\n        this.iGeneration = 0;\n        // stores the average fitness per generation for use in graphing.\n        this.vecAvFitness = [];\n        // stores the best fitness per generation\n        this.vecBestFitness = [];\n        this.vecMedianFitness = [];\n        //-------------------------------------Update-----------------------------\n        //\n        //\tThis is the main workhorse. The entire simulation is controlled from here.\n        this.update = function() {\n            // throw new Error(\"Update Method not implemented.\");\n            //run the sweepers through CParams::iNumTicks amount of cycles. During\n            //this loop each sweepers NN is constantly updated with the appropriate\n            //information from its surroundings. The output from the NN is obtained\n            //and the sweeper is moved. If it encounters a mine its fitness is\n            //updated appropriately,\n            if (_this.iTick++ < (0, $6921c8a491732171$export$2e2bcd8739ae039).numTicks) _this.vecSweepers.forEach(function(_, i) {\n                if (!_this.vecSweepers[i].update(_this.vecMines)) {\n                    console.log(\"error in update, wrong amount of NN inputs\");\n                    return false;\n                }\n                var grabHit = _this.vecSweepers[i].checkForMine(_this.vecMines, (0, $6921c8a491732171$export$2e2bcd8739ae039).mineScale);\n                if (grabHit >= 0) {\n                    // we have discovered a mine so increase fitness\n                    _this.vecSweepers[i].incrementFitness();\n                    // mine found so replace the mine with another at a random \n                    // position\n                    _this.vecMines[grabHit] = new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(Math.random() * _this.canvas.width, Math.random() * _this.canvas.height);\n                }\n                _this.vecThePopulation[i].dFitness = _this.vecSweepers[i].fitness();\n            });\n            else {\n                // update the stats to be used in our stat window\n                _this.vecAvFitness.push(_this.geneticAlgorithm.averageFitness());\n                _this.vecBestFitness.push(_this.geneticAlgorithm.bestFitness());\n                _this.vecMedianFitness.push(_this.geneticAlgorithm.getMedianFitness());\n                _this.iGeneration++;\n                // reset cycles\n                _this.iTick = 0;\n                // run the GA to create a new population\n                _this.geneticAlgorithm.epoch(_this.vecThePopulation);\n                // what are the names of these genomes passed back to us?\n                console.log(\"Generation \".concat(_this.iGeneration, \" Genome Names:\\n\t\").concat(_this.vecThePopulation.map(function(g) {\n                    return g.getName();\n                }).join(\"\\n\t\")));\n                // insert the new (hopefully)improved brains back into the sweepers\n                // and reset their positions etc\n                _this.vecSweepers.forEach(function(_, i) {\n                    _this.vecSweepers[i].putWeights((0, $b79d847807e3ac29$export$1b5e630bc3aea29f)(_this.vecThePopulation[i].vecWeights));\n                    _this.vecSweepers[i].reset();\n                });\n            }\n            return true;\n        };\n        var fastRenderLabel = document.createElement(\"label\");\n        fastRenderLabel.innerText = \"Fast Render\";\n        var fastRenderSwitch = document.createElement(\"input\");\n        fastRenderSwitch.type = \"checkbox\";\n        fastRenderSwitch.checked = false;\n        fastRenderSwitch.addEventListener(\"change\", function(e) {\n            // @ts-ignore\n            if (e.target.checked) _this.fastRender = true;\n            else _this.fastRender = false;\n        });\n        fastRenderLabel.appendChild(fastRenderSwitch);\n        var label = document.createElement(\"label\");\n        label.innerText = \"Pause\";\n        var pauseSwitch = document.createElement(\"input\");\n        pauseSwitch.type = \"checkbox\";\n        pauseSwitch.checked = false;\n        pauseSwitch.addEventListener(\"change\", function(e) {\n            // @ts-ignore\n            if (e.target.checked) _this.pause();\n            else _this.unPause();\n        });\n        label.appendChild(pauseSwitch);\n        this.pauseSwitch = pauseSwitch;\n        this.pause = pause;\n        this.unPause = unPause;\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = (0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth;\n        canvas.height = (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight;\n        setTimeout(function() {\n            document.body.appendChild(canvas);\n            document.body.appendChild(label);\n            document.body.appendChild(fastRenderLabel);\n        }, 0);\n        this.canvas = canvas;\n        this.numberOfSweepers = (0, $6921c8a491732171$export$2e2bcd8739ae039).numSweepers;\n        this.numberOfMines = (0, $6921c8a491732171$export$2e2bcd8739ae039).numMines;\n        this.vecThePopulation = [];\n        this.vecSweepers = new Array(this.numberOfSweepers).fill(\"\").map(function() {\n            return new (0, $f4baf23779c3576b$export$2e2bcd8739ae039)();\n        });\n        this.vecMines = new Array(this.numberOfMines).fill(\"\").map(function() {\n            return new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(Math.random() * canvas.width, Math.random() * canvas.height);\n        });\n        // get the total number of weights used in the sweepers\n        // neural network so we can initialise the GA\n        this.numberOfWeightsInNN = this.vecSweepers[0].getNumberOfWeights();\n        // initialise the Genetic Algorithm class\n        this.geneticAlgorithm = new (0, $8c269be459121e9a$export$2e2bcd8739ae039)(this.numberOfSweepers, (0, $6921c8a491732171$export$2e2bcd8739ae039).mutationRate, (0, $6921c8a491732171$export$2e2bcd8739ae039).crossoverRate, this.numberOfWeightsInNN);\n        // Get the weights from the GA and insert into the sweepers brains\n        this.vecThePopulation = this.geneticAlgorithm.getChromos();\n        this.vecSweepers.forEach(function(_, i) {\n            _this.vecSweepers[i].putWeights(_this.vecThePopulation[i].vecWeights);\n        });\n        // fill the vertex buffers\n        this.sweeperVB = $d9dd0c099e14db4d$var$sweeperVertices.map(function(v) {\n            return new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(v.x, v.y);\n        });\n        this.mineVB = $d9dd0c099e14db4d$var$mine.map(function(v) {\n            return new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(v.x, v.y);\n        });\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(Controller, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this = this;\n                var generationText = \"Generation: \".concat(this.iGeneration);\n                var ctx = this.canvas.getContext(\"2d\");\n                if (!ctx) {\n                    console.log(\"no context\");\n                    return;\n                }\n                ctx.closePath();\n                ctx.beginPath();\n                ctx.fillStyle = \"white\";\n                ctx.strokeRect(0, 0, this.canvas.width, this.canvas.height);\n                ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n                ctx.fill();\n                ctx.strokeStyle = \"black\";\n                ctx.lineWidth = 0.5;\n                ctx.font = \"13px arial\";\n                ctx.closePath();\n                ctx.strokeText(generationText, 5, 15);\n                if (!this.fastRender) {\n                    this.vecMines.forEach(function(_, i) {\n                        ctx.beginPath();\n                        ctx.strokeStyle = \"green\";\n                        ctx.lineWidth = 1;\n                        var mineVB = _this.mineVB.map(function(v) {\n                            return new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(v.x, v.y);\n                        });\n                        _this.worldTransform(mineVB, _this.vecMines[i]);\n                        ctx.moveTo(mineVB[0].x, mineVB[0].y);\n                        for(var vert = 1; vert < mineVB.length; vert++)ctx.lineTo(mineVB[vert].x, mineVB[vert].y);\n                        ctx.lineTo(mineVB[0].x, mineVB[0].y);\n                        ctx.stroke();\n                        ctx.closePath();\n                    });\n                    this.vecSweepers.forEach(function(_, i) {\n                        ctx.beginPath();\n                        ctx.strokeStyle = \"red\";\n                        ctx.lineWidth = 1;\n                        if (i >= (0, $6921c8a491732171$export$2e2bcd8739ae039).numElite) ctx.strokeStyle = \"black\";\n                        var sweeperVB = _this.sweeperVB.map(function(v) {\n                            return new (0, $b44c2fd25c0a87f9$export$2e2bcd8739ae039)(v.x, v.y);\n                        });\n                        _this.vecSweepers[i].worldTransform(sweeperVB);\n                        ctx.moveTo(sweeperVB[0].x, sweeperVB[0].y);\n                        for(var vert = 1; vert < sweeperVB.length; vert++)ctx.lineTo(sweeperVB[vert].x, sweeperVB[vert].y);\n                        ctx.lineTo(sweeperVB[0].x, sweeperVB[0].y);\n                        ctx.stroke();\n                        ctx.closePath();\n                    // confirm(\"that is one SWEEPER\")\n                    });\n                // throw new Error(\"that is one frame\");\n                } else this.plotStats(ctx);\n            // confirm(\"that is one frame\");\n            }\n        },\n        {\n            key: \"worldTransform\",\n            value: function worldTransform(vBuffer, vPos) {\n                // create a transformation matrix\n                var matTransform = new (0, $fb029c0009eea432$export$2e2bcd8739ae039)();\n                // scale\n                matTransform.scale((0, $6921c8a491732171$export$2e2bcd8739ae039).mineScale, (0, $6921c8a491732171$export$2e2bcd8739ae039).mineScale);\n                // and translate\n                matTransform.translate(vPos.x, vPos.y);\n                // now transform the ships vertices\n                matTransform.transformPoints(vBuffer);\n            }\n        },\n        {\n            key: \"plotStats\",\n            value: function plotStats(ctx) {\n                if (!ctx) return;\n                var newAv = this.geneticAlgorithm.averageFitness();\n                var newBest = this.geneticAlgorithm.bestFitness();\n                var newMedian = this.geneticAlgorithm.getMedianFitness();\n                var s = \"Best Fitness: \".concat(newBest);\n                var s2 = \"Average Fitness: \".concat(newAv);\n                var s3 = \"Median Fitness: \".concat(newMedian);\n                ctx.font = \"10px arial\";\n                ctx.strokeText(s, 5, 30);\n                ctx.strokeText(s2, 5, 45);\n                ctx.strokeText(s3, 5, 60);\n                ctx.strokeStyle = \"black\";\n                ctx.lineWidth = 1;\n                ctx.beginPath();\n                ctx.moveTo(0, 0);\n                ctx.lineTo(0, (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight);\n                ctx.lineTo((0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth, (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight);\n                ctx.stroke();\n                ctx.closePath();\n                ctx.strokeStyle = \"red\";\n                ctx.beginPath();\n                ctx.moveTo(0, (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight);\n                for(var i = 0; i <= this.vecAvFitness.length; i++)ctx.lineTo(i * ((0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth / (this.vecAvFitness.length + 2)), (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight - this.vecAvFitness[i] * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight / 20);\n                ctx.lineTo(this.vecAvFitness.length * ((0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth / (this.vecAvFitness.length + 2)), (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight - newAv * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight / 20);\n                ctx.stroke();\n                ctx.closePath();\n                ctx.strokeStyle = \"blue\";\n                ctx.beginPath();\n                ctx.moveTo(0, (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight);\n                for(var i1 = 0; i1 < this.vecBestFitness.length; i1++)ctx.lineTo(i1 * ((0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth / (this.vecBestFitness.length + 2)), (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight - this.vecBestFitness[i1] * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight / 20);\n                ctx.lineTo(this.vecBestFitness.length * ((0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth / (this.vecBestFitness.length + 2)), (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight - newBest * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight / 20);\n                ctx.stroke();\n                ctx.closePath();\n                ctx.strokeStyle = \"green\";\n                ctx.beginPath();\n                ctx.moveTo(0, (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight);\n                for(var i2 = 0; i2 < this.vecMedianFitness.length; i2++)ctx.lineTo(i2 * ((0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth / (this.vecMedianFitness.length + 2)), (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight - this.vecMedianFitness[i2] * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight / 20);\n                ctx.lineTo(this.vecMedianFitness.length * ((0, $6921c8a491732171$export$2e2bcd8739ae039).windowWidth / (this.vecMedianFitness.length + 2)), (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight - newMedian * (0, $6921c8a491732171$export$2e2bcd8739ae039).windowHeight / 20);\n                ctx.stroke();\n                ctx.closePath();\n            }\n        },\n        {\n            // accessor methods\n            key: \"getFastRender\",\n            value: function getFastRender() {\n                return this.fastRender;\n            }\n        },\n        {\n            key: \"setFastRender\",\n            value: function setFastRender(value) {\n                this.fastRender = value;\n            }\n        },\n        {\n            key: \"fastRenderToggler\",\n            value: function fastRenderToggler() {\n                this.fastRender = !this.fastRender;\n            }\n        }\n    ]);\n    return Controller;\n}();\nvar $d9dd0c099e14db4d$export$2e2bcd8739ae039 = $d9dd0c099e14db4d$var$Controller;\n\n\n\nvar $30e11e699995ed08$var$cppMessageSystem = /*#__PURE__*/ function() {\n    \"use strict\";\n    function cppMessageSystem() {\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, cppMessageSystem);\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(cppMessageSystem, null, [\n        {\n            key: \"getInstance\",\n            value: function getInstance() {\n                if (!cppMessageSystem.instance) cppMessageSystem.instance = new cppMessageSystem();\n                return cppMessageSystem.instance;\n            }\n        },\n        {\n            key: \"pushMessage\",\n            value: function pushMessage(message) {\n                cppMessageSystem.messageQueue.push(message);\n            }\n        },\n        {\n            key: \"popMessage\",\n            value: function popMessage() {\n                if (cppMessageSystem.messageQueue.length > 0) return cppMessageSystem.messageQueue.pop() || \"\";\n                return \"\";\n            }\n        },\n        {\n            key: \"peekMessage\",\n            value: function peekMessage() {\n                if (cppMessageSystem.messageQueue.length > 0) return cppMessageSystem.messageQueue[cppMessageSystem.messageQueue.length - 1];\n                return \"\";\n            }\n        }\n    ]);\n    return cppMessageSystem;\n}();\n(function() {\n    $30e11e699995ed08$var$cppMessageSystem.messageQueue = [];\n})();\nvar $30e11e699995ed08$export$861edd1ccea2f746 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Main() {\n        var _this = this;\n        (0, $6a2b2f5024d4ec83$export$2996f80ef42b8419)(this, Main);\n        this.done = false;\n        this.paused = false;\n        this.loop = function() {\n            while($30e11e699995ed08$var$cppMessageSystem.peekMessage() !== \"\")Main.messageProcesser();\n            if (_this.controller.getFastRender() || _this.timer.readyForNextFrame()) {\n                if (!_this.controller.update()) {\n                    console.error(\"Error in controller update\");\n                    _this.done = true;\n                }\n                $30e11e699995ed08$var$cppMessageSystem.pushMessage(\"paint\");\n            }\n            if (_this.done) $30e11e699995ed08$var$cppMessageSystem.pushMessage(\"quit\");\n            if (!_this.paused) setTimeout(_this.loop, 0);\n        };\n        this.paused = false;\n        this.done = false;\n        this.timer = new (0, $702d89c39a5d947d$export$2e2bcd8739ae039)((0, $6921c8a491732171$export$2e2bcd8739ae039).framesPerSecond);\n        this.controller = new (0, $d9dd0c099e14db4d$export$2e2bcd8739ae039)(this.pause, this.unPause);\n        setTimeout(this.loop, 0);\n    }\n    (0, $ee20bab046a9ef96$export$d60067ff2358eee8)(Main, [\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.paused = true;\n                confirm(\"pause\");\n            // cppMessageSystem.pushMessage(\"pause\");\n            // throw new Error(\"Method not implemented.\");\n            }\n        },\n        {\n            key: \"unPause\",\n            value: function unPause() {\n                this.paused = false;\n                this.loop();\n            }\n        }\n    ], [\n        {\n            key: \"getInstance\",\n            value: function getInstance() {\n                if (!Main.instance) Main.instance = new Main();\n                return Main.instance;\n            }\n        },\n        {\n            key: \"messageProcesser\",\n            value: // emulate C++'s message system because it's definitely differnt from JS so why not\n            function messageProcesser() {\n                switch($30e11e699995ed08$var$cppMessageSystem.popMessage()){\n                    case \"pause\":\n                        Main.getInstance().pause();\n                        break;\n                    case \"start\":\n                        Main.getInstance().controller = new (0, $d9dd0c099e14db4d$export$2e2bcd8739ae039)(Main.getInstance().pause, Main.getInstance().unPause);\n                        break;\n                    case \"paint\":\n                        Main.getInstance().controller.render();\n                        break;\n                    case \"quit\":\n                        Main.getInstance().done = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    ]);\n    return Main;\n}();\nvar $30e11e699995ed08$export$2e2bcd8739ae039 = $30e11e699995ed08$export$861edd1ccea2f746;\n\n\nvar $a0e18c8e7b4d3607$var$app = (0, $30e11e699995ed08$export$2e2bcd8739ae039).getInstance();\n\n})();\n//# sourceMappingURL=index.js.map\n","import Main from \"./classes/main\";\nconst app = Main.getInstance(); ","import Timer from \"./timer\";\nimport Controller from \"./controller\";\nimport Parameters from \"./parameters\";\n\nclass cppMessageSystem {\n    private static instance: cppMessageSystem;\n    private constructor() { }\n    public static getInstance(): cppMessageSystem {\n        if (!cppMessageSystem.instance) {\n            cppMessageSystem.instance = new cppMessageSystem();\n        }\n        return cppMessageSystem.instance;\n    }\n    private static messageQueue: string[] = [];\n    public static pushMessage(message: string): void {\n        cppMessageSystem.messageQueue.push(message);\n    }\n    public static popMessage(): string {\n        if(cppMessageSystem.messageQueue.length>0) return cppMessageSystem.messageQueue.pop() || \"\";\n        return \"\";\n    }\n    public static peekMessage(): string {\n        if(cppMessageSystem.messageQueue.length>0) return cppMessageSystem.messageQueue[cppMessageSystem.messageQueue.length-1];\n        return \"\";\n    }\n    \n}\n// window.requestAnimationFrame(step);\n\nexport class Main {\n    private controller: Controller;\n    private done: boolean = false;\n    private paused: boolean = false;\n    \n    \n    private static instance: Main;\n    timer: any;\n    static getInstance(): Main {\n        if (!Main.instance) {\n            Main.instance = new Main();\n        }\n        return Main.instance;\n    }\n    \n    // emulate C++'s message system because it's definitely differnt from JS so why not\n    public static messageProcesser(): void {\n        switch (cppMessageSystem.popMessage()) {\n            case \"pause\":\n                Main.getInstance().pause();\n                break;\n            case \"start\":\n                Main.getInstance().controller = new Controller(Main.getInstance().pause, Main.getInstance().unPause);   \n                break;\n            case \"paint\":\n                Main.getInstance().controller.render();\n                // confirm(\"paint\");\n                // throw new Error(\"paint\");\n                break;\n            case \"quit\":\n                Main.getInstance().done = true;\n                break;\n            default:\n                break;\n        }\n    }\n\n    pause(): void {\n        this.paused = true; \n        confirm(\"pause\");\n        // cppMessageSystem.pushMessage(\"pause\");\n        // throw new Error(\"Method not implemented.\");\n    }\n    unPause(): void {\n\n        this.paused = false;\n        this.loop();\n    }\n\n    private loop = () => {\n        while(cppMessageSystem.peekMessage() !== \"\"){ \n            Main.messageProcesser();\n        }\n        if(this.controller.getFastRender() || this.timer.readyForNextFrame()){\n            if(!this.controller.update()){\n                console.error('Error in controller update');\n                this.done = true;\n            }\n            cppMessageSystem.pushMessage(\"paint\");\n        }\n        if(this.done) cppMessageSystem.pushMessage(\"quit\");\n        if(!this.paused) setTimeout(this.loop, 0);\n    }\n\n    constructor(){\n        this.paused = false;\n        this.done = false;\n        this.timer = new Timer(Parameters.framesPerSecond);\n        this.controller= new Controller(this.pause, this.unPause);\n        setTimeout(this.loop, 0);    \n    }\n}\n\nexport default Main;","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import Parameters from \"./parameters\";\n\nclass Timer {\n    private currentTime: number;\n    private lastTime: number;\n    private nextTime: number;\n    private frameTime: number;\n    private perfCountFreq: number;\n    private timeElapsed: number;\n    private fps: number;\n    constructor(fps: number = Parameters.framesPerSecond){\n        this.currentTime = 0;\n        this.lastTime = 0;\n        this.nextTime = 0;\n        this.frameTime = 0;\n        // this strategy is mostly a byproduct of being a port from C++\n        this.perfCountFreq = 1000; //ms in a second \n        this.timeElapsed = 0;\n        this.fps = 0;\n        if(fps){\n            this.fps = fps;\n            this.frameTime = this.perfCountFreq / this.fps;\n            this.lastTime = new Date().getTime();\n            this.currentTime = this.lastTime;\n            this.nextTime = this.currentTime + this.frameTime;\n\n        }\n    }\n\n    public start(){\n        this.nextTime = new Date().getTime() + this.frameTime;\n    };\n\n    public readyForNextFrame(): boolean {\n        this.currentTime = new Date().getTime();\n        if(this.currentTime > this.nextTime){\n            this.timeElapsed = this.currentTime - this.lastTime;\n            this.lastTime = this.currentTime;\n            this.nextTime = this.currentTime + this.frameTime;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public getTimeElapsed(): number {\n        this.currentTime = new Date().getTime();\n        this.timeElapsed = this.currentTime - this.lastTime;\n        this.lastTime = this.currentTime;\n        return this.timeElapsed;\n    }\n\n}\n\nexport default Timer;","class Parameters {\n    /* General parameters */\n    static windowWidth = 400;\n    static windowHeight = 400;\n    static framesPerSecond = 120;\n\n    /* Used for the neural network */\n    static numInputs = 4;\n    static numHidden = 1;  \n    static neuronsPerHiddenLayer = 6;\n    static numOutputs = 2;\n    /* for tweeking the sigmoid function */\n    static activationResponse = 1;\n    /* Bias value */\n    static bias = -1;\n    /* limits how fast the sweepers can turn */\n    static maxTurnRate = 0.3;\n    static maxSpeed = 2;\n    /* for controlling the size */\n    static sweeperScale = 5;\n    /* controller parameters */\n    static numMines = 40;\n    static numSweepers = 30;\n    /* number of time steps we allow for each generation to live */\n    static numTicks = 2000;\n    /* scaling factor for mines */\n    static mineScale = 2;\n    /* Genetic Algorithim parameters */\n    static crossoverRate = 0.7;\n    static mutationRate = 0.05; // 0.1\n    /* the maximum amount the ga may mutate each weight by */\n    static maxPerturbation = 0.3;\n    /* used for elitism */\n    static numElite = 4;\n    static numCopiesElite = 1\n}\n\nexport default Parameters;","import Vector2d from \"./vector2d\";\nimport GeneticAlgorithm, { Genome } from \"./geneticAlgorithm\";\nimport Minesweeper from \"./mineSweeper\";\nimport TwoDimensionalMatrix from \"./twoDimensionalMatrix\";\nimport Parameters from \"./parameters\";\n\n\nconst numberSweeperVertices = 16;\nconst sweeperVertices: Vector2d[] = new Array(numberSweeperVertices);\nsweeperVertices[0] = new Vector2d(-1, -1);\nsweeperVertices[1] = new Vector2d(-1, 1);\nsweeperVertices[2] = new Vector2d(-0.5, 1);\nsweeperVertices[3] = new Vector2d(-0.5, -1);\nsweeperVertices[4] = new Vector2d(0.5, -1);\nsweeperVertices[5] = new Vector2d(1, -1);\nsweeperVertices[6] = new Vector2d(1, 1);\nsweeperVertices[7] = new Vector2d(0.5, 1);\nsweeperVertices[8] = new Vector2d(-0.5, -0.5);\nsweeperVertices[9] = new Vector2d(0.5,-0.5);\nsweeperVertices[10] = new Vector2d(-0.5, 0.5);\nsweeperVertices[11] = new Vector2d(-.25,0.5);   \nsweeperVertices[12] = new Vector2d(-0.25, 1.75);\nsweeperVertices[13] = new Vector2d(0.25, 1.75);\nsweeperVertices[14] = new Vector2d(0.25, 0.5);\nsweeperVertices[15] = new Vector2d(0.5, 0.5);\n\nconst numberMineVertices = 4;\nconst mine: Vector2d[] = new Array(numberMineVertices); \nmine[0] = new Vector2d(-1, -1);\nmine[1] = new Vector2d(-1, 1);\nmine[2] = new Vector2d(1, 1);\nmine[3] = new Vector2d(1, -1);\n\nclass Controller {\n    // storage for the population of genomes\n    vecThePopulation: Genome[];\n    // array of sweepers\n    vecSweepers: Minesweeper[];\n    // array of mines\n    vecMines: Vector2d[] = [];\n    // size of population\n    numberOfSweepers: number;\n    // amount of mines in the world\n    numberOfMines: number;\n    // amount of weights in neural net\n    numberOfWeightsInNN: number;\n\n    // pointer to the GA class\n    private geneticAlgorithm: GeneticAlgorithm;\n\n    // vertex buffer for the sweeper shape's vertices\n    private sweeperVB: Vector2d[] = [];\n    // vertex buffer for the mine shape's vertices\n    private mineVB: Vector2d[] = [];\n\n    private fastRender: boolean = false;\n\n    private iTick: number = 0;\n\n    private iGeneration: number = 0;\n\n    // stores the average fitness per generation for use in graphing.\n    private vecAvFitness: number[] = [];\n    // stores the best fitness per generation\n    private vecBestFitness: number[] = [];\n    private vecMedianFitness: number[] = [];\n    private pauseSwitch: HTMLInputElement;\n    private canvas: HTMLCanvasElement;\n\n    private pause: Function;\n    private unPause: Function;\n    constructor(pause:Function, unPause:Function){\n        const fastRenderLabel = document.createElement(\"label\");\n        fastRenderLabel.innerText = \"Fast Render\";\n        const fastRenderSwitch = document.createElement(\"input\");\n        fastRenderSwitch.type = \"checkbox\";\n        fastRenderSwitch.checked = false;\n        fastRenderSwitch.addEventListener(\"change\", (e) => {\n            // @ts-ignore\n            if(e.target.checked) {\n                this.fastRender = true;\n            } else {\n                this.fastRender = false;\n            }\n        });\n        fastRenderLabel.appendChild(fastRenderSwitch);\n        const label = document.createElement(\"label\");\n        label.innerText = \"Pause\";\n        const pauseSwitch = document.createElement(\"input\");\n        pauseSwitch.type = \"checkbox\";\n        pauseSwitch.checked = false;\n        pauseSwitch.addEventListener(\"change\", (e) => {\n            // @ts-ignore\n            if(e.target.checked) {\n                this.pause();\n            } else {\n                this.unPause();\n            }\n        });\n        label.appendChild(pauseSwitch);\n        this.pauseSwitch = pauseSwitch;\n        this.pause = pause;\n        this.unPause = unPause;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = Parameters.windowWidth;\n        canvas.height = Parameters.windowHeight;\n        setTimeout(() => {\n            document.body.appendChild(canvas);\n            document.body.appendChild(label);\n            document.body.appendChild(fastRenderLabel);\n        },0);\n        this.canvas = canvas;\n        this.numberOfSweepers = Parameters.numSweepers;\n        this.numberOfMines =  Parameters.numMines;\n        this.vecThePopulation = [];\n        this.vecSweepers = new Array(this.numberOfSweepers).fill('').map(() => new Minesweeper());\n        this.vecMines = new Array(this.numberOfMines).fill('').map(() => new Vector2d(Math.random() * canvas.width, Math.random() * canvas.height));\n\n        // get the total number of weights used in the sweepers\n        // neural network so we can initialise the GA\n        this.numberOfWeightsInNN = this.vecSweepers[0].getNumberOfWeights();\n\n        // initialise the Genetic Algorithm class\n        this.geneticAlgorithm = new GeneticAlgorithm(\n            this.numberOfSweepers,\n            Parameters.mutationRate,\n            Parameters.crossoverRate,\n            this.numberOfWeightsInNN);\n\n        // Get the weights from the GA and insert into the sweepers brains\n        this.vecThePopulation = this.geneticAlgorithm.getChromos();\n        this.vecSweepers.forEach((_, i) => {\n            this.vecSweepers[i].putWeights(this.vecThePopulation[i].vecWeights);\n        });\n        \n       \n        // fill the vertex buffers\n        this.sweeperVB = sweeperVertices.map((v) => new Vector2d(v.x, v.y));\n        this.mineVB = mine.map((v) => new Vector2d(v.x, v.y));\n\n    }\n\n    render():void{\n        const generationText = `Generation: ${this.iGeneration}`;\n        const ctx = this.canvas.getContext(\"2d\");\n        if(!ctx) {\n            console.log(\"no context\");\n            return;\n        }\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.fillStyle = \"white\";\n        ctx.strokeRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.fill();\n        ctx.strokeStyle = \"black\";\n        ctx.lineWidth = 0.5;\n        ctx.font = \"13px arial\";\n        ctx.closePath();\n        ctx.strokeText(generationText, 5, 15);\n        if(!this.fastRender){\n            this.vecMines.forEach((_, i) => {\n                ctx.beginPath();\n                ctx.strokeStyle = \"green\";\n                ctx.lineWidth = 1;\n                const mineVB = this.mineVB.map((v) => new Vector2d(v.x, v.y));\n                this.worldTransform(mineVB, this.vecMines[i]);\n                ctx.moveTo(mineVB[0].x, mineVB[0].y);\n                for (let vert=1; vert<mineVB.length; vert++) {\n                    ctx.lineTo(mineVB[vert].x, mineVB[vert].y);\n                }\n                ctx.lineTo(mineVB[0].x, mineVB[0].y);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            this.vecSweepers.forEach((_, i) => {\n                ctx.beginPath();\n                ctx.strokeStyle = \"red\";\n                ctx.lineWidth = 1;\n                if(i>=Parameters.numElite){\n                    ctx.strokeStyle = \"black\";\n                }\n                const sweeperVB = this.sweeperVB.map((v) => new Vector2d(v.x, v.y));\n                this.vecSweepers[i].worldTransform(sweeperVB);\n                ctx.moveTo(sweeperVB[0].x, sweeperVB[0].y);\n                for (let vert=1; vert<sweeperVB.length; vert++) {\n                    ctx.lineTo(sweeperVB[vert].x, sweeperVB[vert].y);\n                }\n                ctx.lineTo(sweeperVB[0].x, sweeperVB[0].y);\n                ctx.stroke();\n                ctx.closePath();\n                // confirm(\"that is one SWEEPER\")\n            });\n            // throw new Error(\"that is one frame\");\n        } else {\n            this.plotStats(ctx);\n        }\n        // confirm(\"that is one frame\");\n    }\n\n    worldTransform(vBuffer:Vector2d[], vPos: Vector2d):void{\n        // create a transformation matrix\n        const matTransform = new TwoDimensionalMatrix();\n        // scale\n        matTransform.scale(Parameters.mineScale, Parameters.mineScale);\n        // and translate\n        matTransform.translate(vPos.x, vPos.y);\n        // now transform the ships vertices\n        matTransform.transformPoints(vBuffer);\n\n    }\n\n    //-------------------------------------Update-----------------------------\n    //\n    //\tThis is the main workhorse. The entire simulation is controlled from here.\n\n    update = ():boolean => {\n        // throw new Error(\"Update Method not implemented.\");\n        //run the sweepers through CParams::iNumTicks amount of cycles. During\n        //this loop each sweepers NN is constantly updated with the appropriate\n        //information from its surroundings. The output from the NN is obtained\n        //and the sweeper is moved. If it encounters a mine its fitness is\n        //updated appropriately,\n        if(this.iTick++ < Parameters.numTicks) {\n            this.vecSweepers.forEach((_, i) => {\n                if(!this.vecSweepers[i].update(this.vecMines)){\n                    console.log(\"error in update, wrong amount of NN inputs\");\n                    return false;\n                }\n                const grabHit = this.vecSweepers[i].checkForMine(this.vecMines, Parameters.mineScale);\n                if (grabHit >= 0) {\n                    // we have discovered a mine so increase fitness\n                    this.vecSweepers[i].incrementFitness();\n                    // mine found so replace the mine with another at a random \n                    // position\n                    this.vecMines[grabHit] = new Vector2d(Math.random() * this.canvas.width, Math.random() * this.canvas.height);\n                    \n                }\n                this.vecThePopulation[i].dFitness = this.vecSweepers[i].fitness();\n            });\n        }\n        // another generation is completed\n\n        // run the GA and update sweepers with their new NNs\n        else {\n            // update the stats to be used in our stat window\n            this.vecAvFitness.push(this.geneticAlgorithm.averageFitness());\n            this.vecBestFitness.push(this.geneticAlgorithm.bestFitness());\n            this.vecMedianFitness.push(this.geneticAlgorithm.getMedianFitness());\n            this.iGeneration++;\n            // reset cycles\n            this.iTick = 0;\n            // run the GA to create a new population\n            this.geneticAlgorithm.epoch(this.vecThePopulation);\n\n            // what are the names of these genomes passed back to us?\n            console.log(`Generation ${this.iGeneration} Genome Names:\\n\\t${this.vecThePopulation.map((g) => g.getName()).join(\"\\n\\t\")}`)\n\n            // insert the new (hopefully)improved brains back into the sweepers\n            // and reset their positions etc\n            this.vecSweepers.forEach((_, i) => {\n                this.vecSweepers[i].putWeights([...this.vecThePopulation[i].vecWeights]);\n                this.vecSweepers[i].reset();\n            });\n        }\n        return true;\n    }\n\n    plotStats(ctx: CanvasRenderingContext2D | null):void{\n        if(!ctx) return;\n        const newAv = this.geneticAlgorithm.averageFitness();\n        const newBest = this.geneticAlgorithm.bestFitness();\n        const newMedian = this.geneticAlgorithm.getMedianFitness();\n        const s = `Best Fitness: ${newBest}`;\n        const s2 = `Average Fitness: ${newAv}`;\n        const s3 = `Median Fitness: ${newMedian}`;\n        ctx.font = \"10px arial\";\n        ctx.strokeText(s, 5, 30);\n        ctx.strokeText(s2, 5, 45);\n        ctx.strokeText(s3, 5, 60);\n\n        ctx.strokeStyle = \"black\";\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, Parameters.windowHeight);\n        ctx.lineTo(Parameters.windowWidth, Parameters.windowHeight);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.strokeStyle = \"red\";\n        ctx.beginPath();\n        ctx.moveTo(0, Parameters.windowHeight);\n        for(let i=0; i<=this.vecAvFitness.length; i++){\n            ctx.lineTo(i * (Parameters.windowWidth/(this.vecAvFitness.length +2)), Parameters.windowHeight - (this.vecAvFitness[i] * Parameters.windowHeight/20));\n        }\n        ctx.lineTo(this.vecAvFitness.length * (Parameters.windowWidth/(this.vecAvFitness.length + 2)), Parameters.windowHeight - (newAv * Parameters.windowHeight/20));\n        ctx.stroke();\n        ctx.closePath();\n        ctx.strokeStyle = \"blue\";\n        ctx.beginPath();\n        ctx.moveTo(0, Parameters.windowHeight);\n        for(let i=0; i<this.vecBestFitness.length; i++){\n            ctx.lineTo(i * (Parameters.windowWidth/(this.vecBestFitness.length+2)), Parameters.windowHeight - (this.vecBestFitness[i] * Parameters.windowHeight/20));\n        }\n        ctx.lineTo(this.vecBestFitness.length * (Parameters.windowWidth/(this.vecBestFitness.length + 2)), Parameters.windowHeight - (newBest * Parameters.windowHeight/20));\n\n        ctx.stroke();\n        ctx.closePath();\n        ctx.strokeStyle = \"green\";\n        ctx.beginPath();\n        ctx.moveTo(0, Parameters.windowHeight);\n        for(let i=0; i<this.vecMedianFitness.length; i++){\n            ctx.lineTo(i * (Parameters.windowWidth/(this.vecMedianFitness.length+2)), Parameters.windowHeight - (this.vecMedianFitness[i] * Parameters.windowHeight/20));\n        }\n        ctx.lineTo(this.vecMedianFitness.length * (Parameters.windowWidth/(this.vecMedianFitness.length + 2)), Parameters.windowHeight - (newMedian * Parameters.windowHeight/20));\n\n        ctx.stroke();\n        ctx.closePath();\n\n    }\n    // accessor methods\n    getFastRender(){return this.fastRender}\n    setFastRender(value:boolean){this.fastRender = value}\n    fastRenderToggler(){this.fastRender = !this.fastRender} \n};\nexport default Controller;\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","class Vector2d {\n  public x: number;\n  public y: number;\n  constructor(a:number,b:number){\n    this.x = a;\n    this.y = b;\n  }\n  add(vector:Vector2d){\n    this.x += vector.x;\n    this.y += vector.y;\n    return this;\n  }\n  subtract(vector:Vector2d){\n    this.x -= vector.x;\n    this.y -= vector.y;\n    return this;\n  }\n  multiply(multiplier:number){\n    this.x *= multiplier;\n    this.y *= multiplier;\n    return this;\n  }\n  divide(divisor:number){\n    this.x /= divisor;\n    this.y /= divisor;\n    return this;\n  }\n  // also called length of a 2d vector, \n  // hypotenuse of a right triangle\n  magnitude(){\n    return Math.sqrt(this.x*this.x + this.y*this.y);\n  }\n  normalize(){\n    return this.divide(this.magnitude());\n  }\n  static dot(vector1:Vector2d,vector2:Vector2d){\n    return vector1.x*vector2.x + vector1.y*vector2.y;\n  }\n  static sign(vector1:Vector2d,vector2:Vector2d){\n    if(vector1.y*vector2.x > vector1.x*vector2.y){\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n};\n\nexport default Vector2d;\n","import Parameters from \"./parameters\";\nlet genomeCoutner = 0;\n\nexport class Genome {\n  vecWeights: number[] = [];\n  dFitness: number = 0;\n  private name:string;\n  static sort(a:Genome,b:Genome){\n    return a.dFitness - b.dFitness;\n  }\n  getName():string{\n    return this.name;\n  }\n  setName(name:string){\n    this.name = name;\n  }\n  constructor(w:number[] = [], dFitness:number = 0, name:string = \"\") {\n    this.name = name?name:`Genome_${genomeCoutner++}`;\n    if(w.length < 1){\n      this.dFitness = 0;\n    } else if (w.length > 0){\n      this.vecWeights = [...w];\n      this.dFitness = dFitness;\n    }\n  }\n}\n\n\nclass GeneticAlgorithm {\n  private iPopSize: number;\n  private dMutationRate: number;\n  private dCrossoverRate: number;\n  private iChromoLength: number;\n  private dTotalFitness: number;\n  private cGeneration: number;\n  private iFittestGenome: number;\n  private dBestFitness: number;\n  private dWorstFitness: number;\n  private dAverageFitness: number;\n  private vecPop: Genome[] = [];\n  private medianFitness: number;\n  \n  constructor(popsize: number, MutRat: number, CrossRat: number, numweights: number){\n    this.iPopSize = popsize;\n    this.dMutationRate = MutRat;\n    this.dCrossoverRate = CrossRat;\n    this.iChromoLength = numweights;\n    this.medianFitness = 0;\n    this.dTotalFitness = 0;\n    this.cGeneration = 0;\n    this.iFittestGenome = 0;\n    this.dBestFitness = 0;\n    this.dWorstFitness = 99999999;\n    this.dAverageFitness = 0;\n    //initialise population with chromosomes consisting of random\n\t  //weights while all fitnesses are zero\n    for (let i=0; i<this.iPopSize; i++) {\n      this.vecPop.push(new Genome([],0));\n      for (let j=0; j<this.iChromoLength; j++){\n        this.vecPop[i].vecWeights.push(Math.random());\n      }\n    }\n  }\n\n  //---------------------------------mutate--------------------------------\n  //\n  //\tmutates a chromosome by perturbing its weights by an amount not \n  //\tgreater than dMaxPerturbation\n  //  this mutates the chromo in place\n  //-----------------------------------------------------------------------\n  mutate(chromo: number[]):number[] {\n    // traverse the chromosome and mutate each weight dependent\n    // on the mutation rate\n    const newChromo = [];\n    for (let i=0; i<chromo.length; i++) {\n      // do we perturb this weight?\n      if (Math.random() < this.dMutationRate){\n        // add or subtract a small value to the weight\n        // Math.random() - Math.random() returns a value between -1 and 1\n        newChromo[i] = chromo[i] + ((Math.random() - Math.random()) * Parameters.maxPerturbation);\n      } else {\n        // no mutation\n        newChromo[i] = chromo[i];\n      }\n    }\n    return newChromo;\n  }\n\n\n  //----------------------------------getChromoRoulette()------------------\n  //\n  //\treturns a chromo based on roulette wheel sampling\n  //\n  //-----------------------------------------------------------------------\n  getChromoRoulette():Genome {\n    //generate a random number between 0 & total fitness count\n    \n    const slice = Math.random() * this.dTotalFitness;\n    //this will be set to the chosen chromosome\n    let theChosenOne;\n    \n    //go through the chromosomes adding up the fitness so far\n    let fitnessSoFar = 0;\n    for (let i=0; i<this.vecPop.length; i++){\n      fitnessSoFar += this.vecPop[i].dFitness;\n      //if the fitness so far > random number return the chromo at \n      //this point\n      if (fitnessSoFar >= slice){\n        theChosenOne = this.vecPop[i];\n        break;\n      }\n    }\n    if(typeof theChosenOne === \"undefined\") throw new Error('not a genome!');\n    return new Genome([...theChosenOne.vecWeights], theChosenOne.dFitness, theChosenOne.getName());\n  }\n\n  //-------------------------------------crossover()-----------------------\n  //\t\n  //  given parents and storage for the offspring this method performs\n  //\tcrossover according to the GAs crossover rate\n  //-----------------------------------------------------------------------\n  crossover(mum:number[], dad:number[], baby1:number[], baby2:number[]){\n    //just return parents as offspring dependent on the rate\n    //or if parents are the same\n    if ( (Math.random() > this.dCrossoverRate) || (mum.join('') === dad.join(''))) {\n      mum.forEach(x => baby1.push(x));\n      dad.forEach(x => baby2.push(x));\n      return;\n    }\n\n    //determine a crossover point\n    const cp = Math.round(Math.random() * (mum.length - 1));\n    //create the offspring\n    for (let i=0; i<cp; i++){\n      baby1.push(mum[i]);\n      baby2.push(dad[i]);\n    }\n\n    for (let i=cp; i<mum.length; i++){\n      baby1.push(dad[i]);\n      baby2.push(mum[i]);\n    }\n    return;\n  }\n\n\n\n  //-----------------------------------epoch()-----------------------------\n  //\n  //\ttakes a population of chromosones and runs the algorithm through one\n  //\t cycle.\n  //\tReturns a new population of chromosones.\n  //\n  //-----------------------------------------------------------------------\n  epoch(oldPop:Genome[]):void{\n    //assign the given population to the classes population\n    console.log(`this.vecPop: ${JSON.stringify(this.vecPop.map((g)=>g.getName()))}`);\n    console.log(`oldPop: ${JSON.stringify(oldPop.map((g)=>g.getName()))}`);\n    this.vecPop = oldPop;\n\n    //reset the appropriate variables\n    this.reset();\n\n    //sort the population (for scaling and elitism)\n    this.vecPop.sort(Genome.sort);\n\n    //calculate best, worst, average and total fitness\n    this.calculateBestWorstAvTot();\n    \n    //create a temporary vector to store new chromosones\n    const vecNewPop:Genome[] = [];\n\n    //Now to add a little elitism we shall add in some copies of the\n    //fittest genomes. Make sure we add an EVEN number or the roulette\n    //wheel sampling will crash\n    if (!(Parameters.numCopiesElite * Parameters.numElite % 2)){\n      this.grabNBest(Parameters.numElite, Parameters.numCopiesElite, vecNewPop);\n    } else {\n      console.log('error: numCopiesElite * numElite is not even');\n    }\n    \n    //now we enter the GA loop\n    //repeat until a new population is generated\n    while (vecNewPop.length < this.iPopSize){\n      //grab two chromosones\n      const mum = this.getChromoRoulette();\n      const dad = this.getChromoRoulette();\n\n      //create some offspring via crossover\n      const baby1:number[] = [];\n      const baby2:number[] = [];\n\n\n      this.crossover(mum.vecWeights, dad.vecWeights, baby1, baby2);\n      //now we mutate\n      const mutieBaby1 = this.mutate(baby1);\n      const mutieBaby2 = this.mutate(baby2);\n      // console.log(`mutieBaby1: ${JSON.stringify(mutieBaby1)}`)\n      //now copy into vecNewPop population\n      vecNewPop.push(new Genome([...mutieBaby1], 0));\n      vecNewPop.push(new Genome([...mutieBaby2], 0));\n    }\n\n    //finished so assign new pop back into m_vecPop\n    this.vecPop = vecNewPop;\n    oldPop.length = 0;\n    oldPop.push(...this.vecPop);\n  }\n\n  \n  //-------------------------grabNBest----------------------------------\n  //\n  //\tThis works like an advanced form of elitism by inserting NumCopies\n  //  copies of the NBest most fittest genomes into a population vector\n  //--------------------------------------------------------------------\n\n  grabNBest(nBest:number, numCopies:number,pop:Genome[]){\n    let nB = nBest;\n    //add the required amount of copies of the n most fittest \n    //to the supplied vector\n    while(nB--){\n      for (let i=0; i<numCopies; i++){\n        pop.push(\n          new Genome([\n            ...this.vecPop[(this.vecPop.length - 1) - nB].vecWeights],  \n            0, \n            this.vecPop[(this.vecPop.length - 1) - nB].getName())\n        );\n      }\n    }\n  }\n  \n  //-----------------------calculateBestWorstAvTot-----------------------\t\n  //\n  //\tcalculates the fittest and weakest genome and the average/total \n  //\tfitness scores\n  //---------------------------------------------------------------------\n  calculateBestWorstAvTot(){\n    this.dTotalFitness = 0;\n    let highestSoFar = 0;\n    let lowestSoFar  = 9999999;\n    this.vecPop.sort(Genome.sort);\n    this.medianFitness = this.vecPop[Math.floor(this.vecPop.length/2)].dFitness;\n    for (let i=0; i<this.vecPop.length; i++){\n      //update fittest if necessary\n      if (this.vecPop[i].dFitness > highestSoFar){\n        highestSoFar = this.vecPop[i].dFitness;\n        this.iFittestGenome = i;\n        this.dBestFitness\t = highestSoFar;\n      }\n      //update worst if necessary\n      if (this.vecPop[i].dFitness < lowestSoFar){\n        lowestSoFar = this.vecPop[i].dFitness;\n        this.dWorstFitness = lowestSoFar;\n      }\n      this.dTotalFitness\t+= this.vecPop[i].dFitness;\n    }//next chromo\n    this.dAverageFitness = this.dTotalFitness / this.iPopSize;\n  }\n\n  //-------------------------reset()------------------------------\n  //\n  //\tresets all the relevant variables ready for a new generation\n  //--------------------------------------------------------------\n  reset() {\n    this.dTotalFitness = 0;\n    this.dBestFitness = 0;\n    this.dWorstFitness = 9999999;\n    this.dAverageFitness = 0;\n    this.medianFitness = 0;\n  }\n\n  //accessor methods\n  getChromos() {return this.vecPop;}\n  getGeneration() {return this.cGeneration;}\n  averageFitness() {return this.dTotalFitness / this.iPopSize;}\n  bestFitness() {return this.dBestFitness;}\n  getMedianFitness() {return this.medianFitness;}\n}\n\nexport default GeneticAlgorithm;\n","import NeuralNet from \"./neuralNet\";\nimport Vector2d from \"./vector2d\";\nimport Parameters from \"./parameters\";\nimport TwoDimensionalMatrix from \"./twoDimensionalMatrix\";\nimport clamp from \"../utils/clamp\";\nclass Minesweeper {\n    /* minesweeper's neural net */\n    private brain: NeuralNet;\n    /* position of sweeper on screen */\n    private position: Vector2d;\n    /* vector Mine Sweeper is to aim for, ie \"look at here\" */\n    private lookAt: Vector2d;\n    /* sweeper's rotation */\n    private rotation: number;\n    /* velocity of sweeper */\n    private velocity: number;\n    /* mines discovered */\n    private minesFound: number;\n    /* size of sweeper's drawing */\n    private scale: number;\n    /* index of closest mine */\n    private closestMine: number;\n    /* left track */\n    private leftTrack: number;\n    /* right track */\n    private rightTrack: number;\n\n    public getNumberOfWeights = (): number => {\n        return this.brain.getNumberOfWeights();\n    }\n\n    constructor() {\n        this.brain = new NeuralNet();\n        this.position = new Vector2d(Math.random() * Parameters.windowWidth, Math.random() * Parameters.windowHeight);\n        this.rotation = Math.random() * 2 * Math.PI;\n        this.lookAt = new Vector2d(Math.sin(this.rotation) * -1,Math.cos(this.rotation));\n        this.velocity = 0;\n        this.minesFound = 0;\n        this.scale = Parameters.sweeperScale;\n        this.closestMine = 0;\n        this.leftTrack = 0.16;\n        this.rightTrack = 0.16;\n    }\n\n    /*****\n     * reset\n     * Resets the sweepers position, fitness and rotation\n     * \n    */ \n    public reset = ():void => {\n        this.position = new Vector2d(Math.random() * Parameters.windowWidth, Math.random() * Parameters.windowHeight);\n        this.rotation = Math.random() * 2 * Math.PI;\n        this.minesFound = 0;\n    }\n\n    /**\n     * worldTransform\n     * \n     * sets up a translation matrix for the sweeper according to its\n     *  scale, rotation and position. Returns the transformed vertices.\n     * \n     */\n    public worldTransform = (sweeper:Vector2d[]):void => {\n        const matTransform = new TwoDimensionalMatrix();\n        matTransform.scale(this.scale, this.scale);\n        matTransform.rotate(this.rotation % (2 * Math.PI));\n        matTransform.translate(this.position.x, this.position.y);\n        matTransform.transformPoints(sweeper);\n    }\n\n    /**\n     * update() \n     * First we take sensor readings and feed these into the sweepers brain.\n    * The inputs are:\n    * A vector to the closest mine (x, y)\n    * The sweepers 'look at' vector (x, y)\n    * We receive two outputs from the brain: leftTrack & rightTrack.\n    * Given a force for each track we calculate the resultant rotation \n    * and acceleration and apply to current velocity vector.\n    * */\n    public update = (mines: Vector2d[]): Boolean => {\n        const inputs: number[] = [];\n        const closestMine = this.getClosestMine(mines);\n        const closestMineV: Vector2d = new Vector2d(closestMine.x, closestMine.y);\n        closestMineV.normalize();\n        inputs.push(closestMineV.x);\n        inputs.push(closestMineV.y);\n        inputs.push(this.lookAt.x);\n        inputs.push(this.lookAt.y);\n        this.closestMine = mines.map((e) => `${e.x},${e.y}`).findIndex((e) => e ===`${closestMine.x},${closestMine.y}`);\n        const outputs: number[] = this.brain.update(inputs);\n        if (outputs.length !== Parameters.numOutputs) {\n            throw new Error(`Outputs length does not match number of outputs ${outputs.length}, ${Parameters.numOutputs}`);\n        }\n\n        this.leftTrack = outputs[0];\n        this.rightTrack = outputs[1];\n\n        let rotForce = this.leftTrack - this.rightTrack;\n        rotForce = clamp(rotForce, -Parameters.maxTurnRate, Parameters.maxTurnRate);\n        this.rotation += rotForce;\n        this.velocity = this.leftTrack + this.rightTrack;\n        this.lookAt.x = -1 * Math.sin(this.rotation);\n        this.lookAt.y = Math.cos(this.rotation);\n        this.position.add(this.lookAt.multiply(this.velocity));\n        if (this.position.x < 0) {\n            this.position.x = (this.position.x % Parameters.windowWidth) + Parameters.windowWidth;\n        }\n        if (this.position.x > Parameters.windowWidth) {\n            this.position.x = (this.position.x % Parameters.windowWidth)\n        }\n        if (this.position.y < 0) {\n            this.position.y = (this.position.y % Parameters.windowHeight) + Parameters.windowHeight;\n        }\n        if (this.position.y > Parameters.windowHeight) {\n            this.position.y = (this.position.y % Parameters.windowHeight)\n        }\n        return true;\n    }\n\n    public getClosestMine = (mines: Vector2d[]): Vector2d => {\n        let closestMine = 0;\n        let closestDistance = Number.MAX_VALUE;\n        let distance = 0;\n        for (let i = 0; i < mines.length; i++) {\n            const temp = new Vector2d(this.position.x, this.position.y);\n            distance = temp.subtract(mines[i]).magnitude();\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestMine = i;\n            }\n        }\n        return mines[closestMine];\n    }\n\n    public incrementMinesFound = (): void => {\n        this.minesFound++;\n    }\n\n    public getMinesFound = (): number => {\n        return this.minesFound;\n    }\n\n    public getPosition = (): Vector2d => {\n        return new Vector2d(this.position.x, this.position.y);\n    }\n    public checkForMine = (mines: Vector2d[], size:number): number => {\n        const temp = this.getPosition();\n        const distance = temp.subtract(mines[this.closestMine]).magnitude();\n        if (distance < (size + 5)) {\n            return this.closestMine;\n        }\n        return -1;\n    }\n\n\n    // accessors\n    incrementFitness = (): void => { this.incrementMinesFound(); }\n\n\tfitness = () => {return this.minesFound;}\n  \n    putWeights = (w:number[]) => {this.brain.putWeights([...w]);}\n\n}\n\nexport default Minesweeper;","import NeuronLayer from \"./neuronLayer\";\nimport Parameters from \"./parameters\";\n// import { dActivationResponse, dBias, iNeuronsPerHiddenLayer, iNumHidden, iNumInputs, iNumOutputs } from \"./parameters\";\n\nclass NeuralNet {\n  private numInputs: number;\n  private numOutputs: number;\n  private numHiddenLayers: number;\n  private neuronsPerHiddenLayer: number;\n  private neuronLayers: NeuronLayer[] = [];\n\n  constructor(){\n    this.numInputs = Parameters.numInputs;\n    this.numOutputs = Parameters.numOutputs;\n    this.numHiddenLayers = Parameters.numHidden;\n    this.neuronsPerHiddenLayer = Parameters.neuronsPerHiddenLayer;\n    this.createNet();\n  }\n\n\n  createNet(){\n    //create the layers of the network\n    if (this.numHiddenLayers > 0){\n      //create first hidden layer\n      this.neuronLayers.push(new NeuronLayer(this.neuronsPerHiddenLayer, this.numInputs));\n      for (let i=0; i<this.numHiddenLayers-1; i++){\n        this.neuronLayers.push(new NeuronLayer(this.neuronsPerHiddenLayer, this.neuronsPerHiddenLayer));\n      }\n      //create output layer\n      this.neuronLayers.push(new NeuronLayer(this.numOutputs, this.numInputs));\n    } else {\n      //create output layer\n      this.neuronLayers.push(new NeuronLayer(this.numOutputs, this.numInputs));\n    }\n  }\n\n  //\treturns the total number of weights needed for the net\n  getNumberOfWeights():number{\n    let weights = 0;\n    //for each layer\n    for (let i=0; i<this.numHiddenLayers; i++){\n      //for each neuron\n      // if(this.neuronLayers.length > 0){\n        for (let j=0; j<this.neuronLayers[i].numNeurons; j++){\n          //for each weight\n          for (let k=0; k<this.neuronLayers[i].vecNeurons[j].numInputs; k++){\n            weights++;\n          }\n        }\n      // }\n    }\n    return weights;\n  }\n\n  //\treturns an array containing the weights\n  getWeights(){\n    //this will hold the weights\n\t  const weights:number[] = [];\n    //for each layer\n    for (let i=0; i<this.numHiddenLayers; i++){\n      //for each neuron\n      for (let j=0; j<this.neuronLayers[i].numNeurons; j++){\n        //for each weight\n        for (let k=0; k<this.neuronLayers[i].vecNeurons[j].numInputs; k++){\n          weights.push(this.neuronLayers[i].vecNeurons[j].vecWeight[k]);\n        }\n      }\n    }\n    return weights;\n  }\n  putWeights(weights:number[]){\n    let cWeight = 0;\t\n    //for each layer\n    for (let i=0; i<this.numHiddenLayers; i++){\n      //for each neuron\n      if(this.neuronLayers.length > 0){\n        for (let j=0; j<this.neuronLayers[i].numNeurons; j++){\n          //for each weight\n          for (let k=0; k<this.neuronLayers[i].vecNeurons[j].numInputs; k++){\n            this.neuronLayers[i].vecNeurons[j].vecWeight[k] = weights[cWeight++];\n          }\n        }\n      }\n    }\n    return;\n  }\n  update(inputArgs:number[]):number[]{\n    let inputs = [...inputArgs];\n    // stores the resultant outputs from each layer\n    let outputs:number[] = [];\n    let cWeight = 0;\n    // first check that we have the correct amount of inputs\n    if (inputs.length !== this.numInputs){\n      // just return an empty vector if incorrect.\n      console.log(`Error wrong number of inputs, expected ${this.numInputs} got ${inputs.length}`);\n      return outputs;\n    }\n    // For each layer.... (+1 for bias layer)\n    for (let i=0; i<this.numHiddenLayers + 1; i++){\n      if ( i > 0 ){\n        inputs = [...outputs];\n      }\n      outputs.length = 0;\n      cWeight = 0;\n      // for each neuron sum the (inputs * corresponding weights).\n      // Throw the total at our sigmoid function to get the output.\n      if(this.neuronLayers.length > 0){\n        for (let j=0; j<this.neuronLayers[i].numNeurons; j++){\n          let netinput = 0;\n          this.numInputs = this.neuronLayers[i].vecNeurons[j].numInputs;\n          for (let k=0; k<this.numInputs-1; k++){\n            // sum the weights x inputs\n            netinput += this.neuronLayers[i].vecNeurons[j].vecWeight[k] * inputs[cWeight++];\n          }\n          // add in the bias\n          netinput += this.neuronLayers[i].vecNeurons[j].vecWeight[this.numInputs-1] * Parameters.bias;\n          // we can store the outputs from each layer as we generate them.\n          // The combined activation is first filtered through the sigmoid\n          // function\n          outputs.push(this.sigmoid(netinput, Parameters.activationResponse));\n          cWeight = 0;\n        }\n      }\n    }\n    return outputs;\n  }\n  sigmoid(netinput: number, response:number):number {\n    return ( 1 / ( 1 + Math.exp(-1 * netinput / response)));\n  }\n}\n\n export default NeuralNet;\n","import Neuron from './neuron';\n\nclass NeuronLayer {\n  //the number of neurons in this layer\n  numNeurons: number;\n  numInputsPerNeuron: number;\n  //the layer of neurons\n  vecNeurons: Neuron[] = [];\n\n  constructor(numNeurons:number, numInputsPerNeuron: number){\n    this.numNeurons = numNeurons;\n    this.numInputsPerNeuron = numInputsPerNeuron;\n    for(let i = 0; i<numNeurons; i++){\n      this.vecNeurons.push(new Neuron(this.numInputsPerNeuron));\n    }\n  }\n};\n\nexport default NeuronLayer;","class Neuron {\n  numInputs:number;\n  vecWeight:number[] = [];\n\n\n  constructor(numInputs:number) {\n    //we need an additional weight for the bias hence the +1\n    this.numInputs = numInputs;\n    for (let i=0; i<numInputs+1; ++i){\n      this.vecWeight.push(Math.random());\n    }\n  }\n\n}\n\nexport default Neuron;\n\n","import Vector2d from \"./vector2d\";\n\n\nclass TwoDimensionalMatrix {\n    _11: number;\n    _12: number;\n    _13: number;\n    _21: number;\n    _22: number;\n    _23: number;\n    _31: number;\n    _32: number;\n    _33: number;\n\n    constructor() {\n        this._11 = 1;\n        this._12 = 0;\n        this._13 = 0;\n        this._21 = 0;\n        this._22 = 1;\n        this._23 = 0;\n        this._31 = 0;\n        this._32 = 0;\n        this._33 = 1;\n    }\n\n    private consumeMatrix(mIn: TwoDimensionalMatrix): void {\n        this._11 = mIn._11;\n        this._12 = mIn._12;\n        this._13 = mIn._13;\n        this._21 = mIn._21;\n        this._22 = mIn._22;\n        this._23 = mIn._23;\n        this._31 = mIn._31;\n        this._32 = mIn._32;\n        this._33 = mIn._33;\n    }\n\n    public TwoDimensionalMatrixMultiply(mIn: TwoDimensionalMatrix): void {\n        const mat_temp = new TwoDimensionalMatrix();\n        mat_temp._11 = (this._11 * mIn._11) + (this._12 * mIn._21) + (this._13 * mIn._31);\n        mat_temp._12 = (this._11 * mIn._12) + (this._12 * mIn._22) + (this._13 * mIn._32);\n        mat_temp._13 = (this._11 * mIn._13) + (this._12 * mIn._23) + (this._13 * mIn._33);\n        mat_temp._21 = (this._21 * mIn._11) + (this._22 * mIn._21) + (this._23 * mIn._31);\n        mat_temp._22 = (this._21 * mIn._12) + (this._22 * mIn._22) + (this._23 * mIn._32);\n        mat_temp._23 = (this._21 * mIn._13) + (this._22 * mIn._23) + (this._23 * mIn._33);\n        mat_temp._31 = (this._31 * mIn._11) + (this._32 * mIn._21) + (this._33 * mIn._31);\n        mat_temp._32 = (this._31 * mIn._12) + (this._32 * mIn._22) + (this._33 * mIn._32);\n        mat_temp._33 = (this._31 * mIn._13) + (this._32 * mIn._23) + (this._33 * mIn._33);\n        this.consumeMatrix(mat_temp);\n    }\n\n    public createIdentity(): TwoDimensionalMatrix {\n        const matrix = new TwoDimensionalMatrix();\n        matrix._11 = 1;\n        matrix._22 = 1;\n        matrix._33 = 1;\n        matrix._12 = 0;\n        matrix._13 = 0;\n        matrix._21 = 0;\n        matrix._23 = 0;\n        matrix._31 = 0;\n        matrix._32 = 0;\n        return matrix;\n    }\n    public translate(x: number, y: number): void {\n        const matrix = this.createIdentity();\n        matrix._31 = x;\n        matrix._32 = y;\n        this.TwoDimensionalMatrixMultiply(matrix);\n    }\n\n    public scale(xScale: number, yScale: number): void {\n        const matrix = this.createIdentity();\n        matrix._11 = xScale;\n        matrix._22 = yScale;\n        this.TwoDimensionalMatrixMultiply(matrix);\n\n    }\n\n    public rotate(angle: number): void {\n        const matrix = this.createIdentity();\n        const sin = Math.sin(angle);\n        const cos = Math.cos(angle);\n        matrix._11 = cos;\n        matrix._12 = sin;\n        matrix._21 = -1 * sin;\n        matrix._22 = cos;\n        this.TwoDimensionalMatrixMultiply(matrix);\n    }\n\n    public transformPoints(points: Vector2d[]): void {\n        for (let i = 0; i < points.length; i++) {\n            const tempX = (this._11 * points[i].x) + (this._21 * points[i].y) + (this._31);\n            const tempY = (this._12 * points[i].x) + (this._22 * points[i].y) + (this._32);\n            points[i].x = tempX;\n            points[i].y = tempY;\n        }\n    }\n\n    public reportMatrix(): string {\n        return (`\n        ${this._11} ${this._12} ${this._13}\n        ${this._21} ${this._22} ${this._23}\n        ${this._31} ${this._32} ${this._33}`);\n    }\n};\n\nexport default TwoDimensionalMatrix;","\n//-------------------------------------Clamp()-----------------------------------------\n//\n//\tclamps the first argument between the second two\n//\n//-------------------------------------------------------------------------------------\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n\nexport default clamp;"],"names":["$6a2b2f5024d4ec83$export$2996f80ef42b8419","instance","Constructor","TypeError","$ee20bab046a9ef96$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$ee20bab046a9ef96$export$d60067ff2358eee8","protoProps","staticProps","prototype","$6921c8a491732171$var$Parameters","Parameters","windowWidth","windowHeight","framesPerSecond","numInputs","numHidden","neuronsPerHiddenLayer","numOutputs","activationResponse","bias","maxTurnRate","maxSpeed","sweeperScale","numMines","numSweepers","numTicks","mineScale","crossoverRate","mutationRate","maxPerturbation","numElite","numCopiesElite","$702d89c39a5d947d$var$Timer","Timer","fps","arguments","currentTime","lastTime","nextTime","frameTime","perfCountFreq","timeElapsed","Date","getTime","value","$9b547ff733c97a35$export$79e617b1955a2616","arr","len","arr2","Array","$b79d847807e3ac29$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","toString","call","slice","constructor","name","test","$b44c2fd25c0a87f9$var$Vector2d","Vector2d","a","b","x","y","vector","multiplier","divisor","Math","sqrt","divide","magnitude","vector1","vector2","$8c269be459121e9a$var$genomeCoutner","$8c269be459121e9a$export$42a9d1bcccbbcaf9","Genome","w","dFitness","vecWeights","concat","$8c269be459121e9a$var$GeneticAlgorithm","GeneticAlgorithm","popsize","MutRat","CrossRat","numweights","vecPop","iPopSize","dMutationRate","dCrossoverRate","iChromoLength","medianFitness","dTotalFitness","cGeneration","iFittestGenome","dBestFitness","dWorstFitness","dAverageFitness","push","j","random","chromo","newChromo","theChosenOne","fitnessSoFar","Error","getName","mum","dad","baby1","baby2","join","forEach","cp","round","i1","oldPop","console","log","JSON","stringify","map","g","reset","sort","calculateBestWorstAvTot","vecNewPop","grabNBest","getChromoRoulette","crossover","mutieBaby1","mutate","mutieBaby2","apply","nBest","numCopies","pop","nB","highestSoFar","lowestSoFar","floor","$4f7b016c02428e41$export$2e2bcd8739ae039","Neuron","vecWeight","$94031f946807b8f9$export$2e2bcd8739ae039","NeuronLayer","numNeurons","numInputsPerNeuron","vecNeurons","$b191d7915d020190$var$NeuralNet","NeuralNet","neuronLayers","numHiddenLayers","createNet","weights","k","cWeight","inputArgs","inputs","outputs","netinput","sigmoid","response","exp","$fb029c0009eea432$var$TwoDimensionalMatrix","TwoDimensionalMatrix","_11","_12","_13","_21","_22","_23","_31","_32","_33","mIn","mat_temp","consumeMatrix","matrix","createIdentity","TwoDimensionalMatrixMultiply","xScale","yScale","angle","sin","cos","points","tempX","tempY","$f4baf23779c3576b$export$2e2bcd8739ae039","Minesweeper","_this","getNumberOfWeights","brain","position","rotation","PI","minesFound","worldTransform","sweeper","matTransform","scale","rotate","translate","transformPoints","update","mines","closestMine","getClosestMine","closestMineV","normalize","lookAt","e","findIndex","leftTrack","rightTrack","rotForce","min","max","velocity","add","multiply","closestDistance","Number","MAX_VALUE","distance","temp","subtract","incrementMinesFound","getMinesFound","getPosition","checkForMine","size","incrementFitness","fitness","putWeights","$d9dd0c099e14db4d$var$sweeperVertices","$d9dd0c099e14db4d$var$mine","$d9dd0c099e14db4d$var$Controller","Controller","pause","unPause","vecMines","sweeperVB","mineVB","fastRender","iTick","iGeneration","vecAvFitness","vecBestFitness","vecMedianFitness","vecSweepers","_","grabHit","canvas","width","height","vecThePopulation","geneticAlgorithm","averageFitness","bestFitness","getMedianFitness","epoch","fastRenderLabel","document","createElement","innerText","fastRenderSwitch","type","checked","addEventListener","appendChild","label","pauseSwitch","setTimeout","body","numberOfSweepers","numberOfMines","fill","numberOfWeightsInNN","getChromos","v","generationText","ctx","getContext","closePath","beginPath","fillStyle","strokeRect","fillRect","strokeStyle","lineWidth","font","strokeText","plotStats","moveTo","vert","lineTo","stroke","vBuffer","vPos","newAv","newBest","newMedian","s","s2","s3","i2","$30e11e699995ed08$var$cppMessageSystem","cppMessageSystem","message","messageQueue","Main","done","paused","loop","peekMessage","messageProcesser","controller","getFastRender","timer","readyForNextFrame","error","pushMessage","confirm","popMessage","getInstance","render"],"version":3,"file":"index.js.map"}